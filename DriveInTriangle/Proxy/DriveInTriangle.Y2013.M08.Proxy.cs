//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="DriveInTriangle.Y2013.M08, Version=0.0.0.0, Culture=neutral, PublicKeyToken=e3f5c" +
    "a7dcfa79423")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Robotics.DriveInTriangle.DriveOperations.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2013/08/driveintriangle/driveoperations.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2013/08/driveintriangle/driveoperations.html", ElementName="DriveRequest")]
    public class DriveRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DriveRequest() {
        }
        
        private double _Distance;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double Distance {
            get {
                return this._Distance;
            }
            set {
                this._Distance = value;
            }
        }
        
        private double _Power;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double Power {
            get {
                return this._Power;
            }
            set {
                this._Power = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current DriveRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveRequest typedTarget = ((global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveRequest)(target));
            typedTarget._Distance = this._Distance;
            typedTarget._Power = this._Power;
        }
        
        /// <summary>
        ///Clones DriveRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveRequest target0 = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DriveRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Distance);
            writer.Write(this._Power);
        }
        
        /// <summary>
        ///Deserializes DriveRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DriveRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Distance = reader.ReadDouble();
            this._Power = reader.ReadDouble();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2013/08/driveintriangle/driveoperations.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2013/08/driveintriangle/driveoperations.html", ElementName="DriveResponse")]
    public class DriveResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DriveResponse() {
        }
        
        private int _Status;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int Status {
            get {
                return this._Status;
            }
            set {
                this._Status = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current DriveResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveResponse typedTarget = ((global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveResponse)(target));
            typedTarget._Status = this._Status;
        }
        
        /// <summary>
        ///Clones DriveResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveResponse target0 = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DriveResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Status);
        }
        
        /// <summary>
        ///Deserializes DriveResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DriveResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Status = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2013/08/driveintriangle/driveoperations.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2013/08/driveintriangle/driveoperations.html", ElementName="RotateRequest")]
    public class RotateRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RotateRequest() {
        }
        
        private double _Degrees;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double Degrees {
            get {
                return this._Degrees;
            }
            set {
                this._Degrees = value;
            }
        }
        
        private double _Power;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double Power {
            get {
                return this._Power;
            }
            set {
                this._Power = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current RotateRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateRequest typedTarget = ((global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateRequest)(target));
            typedTarget._Degrees = this._Degrees;
            typedTarget._Power = this._Power;
        }
        
        /// <summary>
        ///Clones RotateRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateRequest target0 = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RotateRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Degrees);
            writer.Write(this._Power);
        }
        
        /// <summary>
        ///Deserializes RotateRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RotateRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Degrees = reader.ReadDouble();
            this._Power = reader.ReadDouble();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2013/08/driveintriangle/driveoperations.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2013/08/driveintriangle/driveoperations.html", ElementName="RotateResponse")]
    public class RotateResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RotateResponse() {
        }
        
        private int _Status;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int Status {
            get {
                return this._Status;
            }
            set {
                this._Status = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current RotateResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateResponse typedTarget = ((global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateResponse)(target));
            typedTarget._Status = this._Status;
        }
        
        /// <summary>
        ///Clones RotateResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateResponse target0 = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RotateResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Status);
        }
        
        /// <summary>
        ///Deserializes RotateResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RotateResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Status = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2013/08/driveintriangle/driveoperations.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2013/08/driveintriangle/driveoperations.html", ElementName="DriveOperationsState")]
    public class DriveOperationsState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DriveOperationsState() {
        }
        
        /// <summary>
        ///Copies the data member values of the current DriveOperationsState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState typedTarget = ((global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState)(target));
        }
        
        /// <summary>
        ///Clones DriveOperationsState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState target0 = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DriveOperationsState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes DriveOperationsState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DriveOperationsState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Drive : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveRequest, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveResponse>> {
        
        public Drive() {
        }
        
        public Drive(global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveRequest body) : 
                base(body) {
        }
        
        public Drive(global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveRequest body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveResponse> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Rotate : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateRequest, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateResponse>> {
        
        public Rotate() {
        }
        
        public Rotate(global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateRequest body) : 
                base(body) {
        }
        
        public Rotate(global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateRequest body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateResponse> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Retrieves the current state of the service")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Sets the current state of the service.\nThis is raised as an event whenever the st" +
        "ate changes.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType>> {
        
        public Replace() {
        }
        
        public Replace(global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState body) : 
                base(body) {
        }
        
        public Replace(global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DriveOperationsOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Robotics.DriveInTriangle.DriveOperations.Proxy.Drive, global:: Robotics.DriveInTriangle.DriveOperations.Proxy.Rotate, global:: Robotics.DriveInTriangle.DriveOperations.Proxy.Get, global:: Robotics.DriveInTriangle.DriveOperations.Proxy.Replace, global:: Robotics.DriveInTriangle.DriveOperations.Proxy.Subscribe> {
        
        public DriveOperationsOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveResponse> Drive() {
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveRequest body = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveRequest();
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.Drive operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Drive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Drive(out global::Robotics.DriveInTriangle.DriveOperations.Proxy.Drive operation) {
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveRequest body = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveRequest();
            operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Drive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveResponse> Drive(global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveRequest body) {
            if ((body == null)) {
                body = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveRequest();
            }
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.Drive operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Drive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Drive(global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveRequest body, out global::Robotics.DriveInTriangle.DriveOperations.Proxy.Drive operation) {
            if ((body == null)) {
                body = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveRequest();
            }
            operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Drive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateResponse> Rotate() {
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateRequest body = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateRequest();
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.Rotate operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Rotate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Rotate(out global::Robotics.DriveInTriangle.DriveOperations.Proxy.Rotate operation) {
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateRequest body = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateRequest();
            operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Rotate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateResponse> Rotate(global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateRequest body) {
            if ((body == null)) {
                body = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateRequest();
            }
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.Rotate operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Rotate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Rotate(global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateRequest body, out global::Robotics.DriveInTriangle.DriveOperations.Proxy.Rotate operation) {
            if ((body == null)) {
                body = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.RotateRequest();
            }
            operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Rotate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.Get operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Robotics.DriveInTriangle.DriveOperations.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.Get operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Robotics.DriveInTriangle.DriveOperations.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> Replace() {
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState body = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState();
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.Replace operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(out global::Robotics.DriveInTriangle.DriveOperations.Proxy.Replace operation) {
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState body = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState();
            operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> Replace(global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState body) {
            if ((body == null)) {
                body = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState();
            }
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.Replace operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState body, out global::Robotics.DriveInTriangle.DriveOperations.Proxy.Replace operation) {
            if ((body == null)) {
                body = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsState();
            }
            operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.Subscribe operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Robotics.DriveInTriangle.DriveOperations.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Robotics.DriveInTriangle.DriveOperations.Proxy.Subscribe operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Robotics.DriveInTriangle.DriveOperations.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("A user defined activity.")]
    [global::System.ComponentModel.DisplayNameAttribute("DriveInTriangle DriveOperations")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/2013/08/driveintriangle/driveoperations.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2013/08/driveintriangle/driveoperations.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2013/08/driveintriangle/driveoperations.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.DriveOperationsOperations = new global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.DriveOperationsOperations, "http://schemas.microsoft.com/2013/08/driveintriangle/driveoperations.html", "DriveOperationsOperations", ""));
        }
        
        public global::Robotics.DriveInTriangle.DriveOperations.Proxy.DriveOperationsOperations DriveOperationsOperations;
    }
}
namespace Robotics.DriveInTriangle.Diagram.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2013/08/driveintriangle/diagram.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2013/08/driveintriangle/diagram.html", ElementName="ActionRequest")]
    public class ActionRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ActionRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current ActionRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.DriveInTriangle.Diagram.Proxy.ActionRequest typedTarget = ((global::Robotics.DriveInTriangle.Diagram.Proxy.ActionRequest)(target));
        }
        
        /// <summary>
        ///Clones ActionRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.DriveInTriangle.Diagram.Proxy.ActionRequest target0 = new global::Robotics.DriveInTriangle.Diagram.Proxy.ActionRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ActionRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes ActionRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ActionRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2013/08/driveintriangle/diagram.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2013/08/driveintriangle/diagram.html", ElementName="ActionResponse")]
    public class ActionResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ActionResponse() {
        }
        
        /// <summary>
        ///Copies the data member values of the current ActionResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.DriveInTriangle.Diagram.Proxy.ActionResponse typedTarget = ((global::Robotics.DriveInTriangle.Diagram.Proxy.ActionResponse)(target));
        }
        
        /// <summary>
        ///Clones ActionResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.DriveInTriangle.Diagram.Proxy.ActionResponse target0 = new global::Robotics.DriveInTriangle.Diagram.Proxy.ActionResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ActionResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes ActionResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ActionResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2013/08/driveintriangle/diagram.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2013/08/driveintriangle/diagram.html", ElementName="DiagramState")]
    public class DiagramState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DiagramState() {
        }
        
        /// <summary>
        ///Copies the data member values of the current DiagramState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState typedTarget = ((global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState)(target));
        }
        
        /// <summary>
        ///Clones DiagramState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState target0 = new global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DiagramState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes DiagramState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DiagramState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Action : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Robotics.DriveInTriangle.Diagram.Proxy.ActionRequest, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.Diagram.Proxy.ActionResponse>> {
        
        public Action() {
        }
        
        public Action(global::Robotics.DriveInTriangle.Diagram.Proxy.ActionRequest body) : 
                base(body) {
        }
        
        public Action(global::Robotics.DriveInTriangle.Diagram.Proxy.ActionRequest body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.Diagram.Proxy.ActionResponse> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Retrieves the current state of the service")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Sets the current state of the service.\nThis is raised as an event whenever the st" +
        "ate changes.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType>> {
        
        public Replace() {
        }
        
        public Replace(global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState body) : 
                base(body) {
        }
        
        public Replace(global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DiagramOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Robotics.DriveInTriangle.Diagram.Proxy.Action, global:: Robotics.DriveInTriangle.Diagram.Proxy.Get, global:: Robotics.DriveInTriangle.Diagram.Proxy.Replace, global:: Robotics.DriveInTriangle.Diagram.Proxy.Subscribe> {
        
        public DiagramOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.Diagram.Proxy.ActionResponse> Action() {
            global::Robotics.DriveInTriangle.Diagram.Proxy.ActionRequest body = new global::Robotics.DriveInTriangle.Diagram.Proxy.ActionRequest();
            global::Robotics.DriveInTriangle.Diagram.Proxy.Action operation = new global::Robotics.DriveInTriangle.Diagram.Proxy.Action(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Action(out global::Robotics.DriveInTriangle.Diagram.Proxy.Action operation) {
            global::Robotics.DriveInTriangle.Diagram.Proxy.ActionRequest body = new global::Robotics.DriveInTriangle.Diagram.Proxy.ActionRequest();
            operation = new global::Robotics.DriveInTriangle.Diagram.Proxy.Action(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.Diagram.Proxy.ActionResponse> Action(global::Robotics.DriveInTriangle.Diagram.Proxy.ActionRequest body) {
            if ((body == null)) {
                body = new global::Robotics.DriveInTriangle.Diagram.Proxy.ActionRequest();
            }
            global::Robotics.DriveInTriangle.Diagram.Proxy.Action operation = new global::Robotics.DriveInTriangle.Diagram.Proxy.Action(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Action(global::Robotics.DriveInTriangle.Diagram.Proxy.ActionRequest body, out global::Robotics.DriveInTriangle.Diagram.Proxy.Action operation) {
            if ((body == null)) {
                body = new global::Robotics.DriveInTriangle.Diagram.Proxy.ActionRequest();
            }
            operation = new global::Robotics.DriveInTriangle.Diagram.Proxy.Action(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Robotics.DriveInTriangle.Diagram.Proxy.Get operation = new global::Robotics.DriveInTriangle.Diagram.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Robotics.DriveInTriangle.Diagram.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Robotics.DriveInTriangle.Diagram.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Robotics.DriveInTriangle.Diagram.Proxy.Get operation = new global::Robotics.DriveInTriangle.Diagram.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Robotics.DriveInTriangle.Diagram.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Robotics.DriveInTriangle.Diagram.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> Replace() {
            global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState body = new global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState();
            global::Robotics.DriveInTriangle.Diagram.Proxy.Replace operation = new global::Robotics.DriveInTriangle.Diagram.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(out global::Robotics.DriveInTriangle.Diagram.Proxy.Replace operation) {
            global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState body = new global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState();
            operation = new global::Robotics.DriveInTriangle.Diagram.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> Replace(global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState body) {
            if ((body == null)) {
                body = new global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState();
            }
            global::Robotics.DriveInTriangle.Diagram.Proxy.Replace operation = new global::Robotics.DriveInTriangle.Diagram.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState body, out global::Robotics.DriveInTriangle.Diagram.Proxy.Replace operation) {
            if ((body == null)) {
                body = new global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramState();
            }
            operation = new global::Robotics.DriveInTriangle.Diagram.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Robotics.DriveInTriangle.Diagram.Proxy.Subscribe operation = new global::Robotics.DriveInTriangle.Diagram.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Robotics.DriveInTriangle.Diagram.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Robotics.DriveInTriangle.Diagram.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Robotics.DriveInTriangle.Diagram.Proxy.Subscribe operation = new global::Robotics.DriveInTriangle.Diagram.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Robotics.DriveInTriangle.Diagram.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Robotics.DriveInTriangle.Diagram.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("A user defined activity.")]
    [global::System.ComponentModel.DisplayNameAttribute("DriveInTriangle")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/2013/08/driveintriangle/diagram.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2013/08/driveintriangle/diagram.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2013/08/driveintriangle/diagram.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.DiagramOperations = new global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.DiagramOperations, "http://schemas.microsoft.com/2013/08/driveintriangle/diagram.html", "DiagramOperations", ""));
        }
        
        public global::Robotics.DriveInTriangle.Diagram.Proxy.DiagramOperations DiagramOperations;
    }
}
