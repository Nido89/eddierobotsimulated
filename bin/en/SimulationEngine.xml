<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimulationEngine</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Robotics.Simulation.Engine.BumperArrayEntity">
            <summary>
            Models an array of contact sensors
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.VisualEntity">
            <summary>
            Visual simulation entity. Used to render an entity in the simulation.
            <remarks>Visual entities can participate in the simulated physics if they have a PhysicsEntity instance.
            If PhysicsEntity is not set and the derived class did not add it explicitly to the physics engine, the Visual entity
            will be purely kinematic, aka it will not interact physically with the world
            </remarks>
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.IVisualEntity">
            <summary>
            Behavior aspect of simulation entities. State is tracks as part of the Entity class
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.IVisualEntity.LoadResources(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates Directx runtime resource for rendering the entity
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.IVisualEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Called after the entity is inserted to the simulation engine
            </summary>
            <param name="device">DirectX device</param>
            <param name="physicsEngine">Physics engine instance</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.IVisualEntity.Update(Microsoft.Robotics.Simulation.Engine.FrameUpdate)">
            <summary>
            Called once per frame so the entity can perform computation required for rendering and/or simulation
            </summary>
            <param name="update">Update information</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.IVisualEntity.Render(Microsoft.Robotics.Simulation.Engine.MatrixTransforms,Microsoft.Robotics.Simulation.Engine.CameraEntity)">
            <summary>
            Caled once per frame so the entity can render itself. 
            </summary>
            <remarks>
            Physics only entities do not have to do anything 
            here but must derive so base implementation does not attempt to render
            </remarks>
            <param name="transforms">Matrix transforms</param>
            <param name="currentCamera">Currently active camera</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.IVisualEntity.InsertEntity(Microsoft.Robotics.Simulation.Engine.VisualEntity)">
            <summary>
            Insert entity as child of instance. Must be implemented in derived classes that support children
            </summary>
            <param name="child">Child entity</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.IVisualEntity.AddShapeToPhysicsEntity(Microsoft.Robotics.Simulation.Physics.Shape,Microsoft.Robotics.Simulation.Engine.VisualEntityMesh)">
            <summary>
            Adds a shape instance to the physics entity that is associated with the visual entity
            </summary>
            <remarks>This method must be used to dynamically add a shape after the entity has been initialized</remarks>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.IVisualEntity.RemoveShapeFromPhysicsEntity(Microsoft.Robotics.Simulation.Physics.Shape,Microsoft.Robotics.Simulation.Engine.VisualEntityMesh)">
            <summary>
            Removes a shape instance added to a physics entity with AddShapeToPhysicsEntity
            </summary>
            <param name="shape"></param>
            <param name="mesh"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.LoadTextures">
            <summary>
            Load any required textures in each mesh
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.ComputeTopMostParent">
            <summary>
            Gets the parent in this entity's hierarchy that has no other parent (ie, it is the root).
            Returns 'this' if we are the top most parent.
            Will *never* return null.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntity._entityBoundingSphere">
            <summary>
            Stores the entity bounding sphere after mesh transforms
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntity._entityWorldBoundingSphere">
            <summary>
            Stores the entity bounding sphere in world space
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntity._worldBoundingSphereNeedsUpdating">
            <summary>
            If our hierarchy doesn't move, we won't have to re-update our
            bounding sphere each frame which can be computationally expensive.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntity._batchedMesh">
            <summary>
            Contains everything we need for batching
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.LoadResources(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Loads resources specified in entity.
            Called by default when the graphics engine invokes Initialize()
            </summary>
            <remarks>The behavior of this routine depends on the values of State.Assets.Mesh and the Meshes array.
            If a mesh resource is provided, the routine will create the mesh and not look at the physics primitives.
            If no mesh resource is provided and the Meshes array is null, the routine will create a DirectX graphics mesh
            for each physics primitive in the State.PhysicsPrimitives list</remarks>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Entity initialization
            </summary>
            <remarks>All derived class should call this routine if automatic loading of effect and other assets is wanted. 
            If no effect file is supplied the default effect will be used.
            This method will also generates graphics meshes from physics entities, if no file based mesh is supplied. If the entity has children, their Initialize routine will be called before exit from this method</remarks>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.CompactVertexBuffer(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Called by VisualEntity.Initialize() to use the minimal amount of vertex buffer data required.
            If you derive a new entity type from VisualEntity and override Initialize() and don't call
             base.Initialize(), then you should call this method
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.DisableEntityViewFrustumCulling">
            <summary>
            Call this function to disable view frustum culling for an entity
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.UpdateEntityWorldBoundingSphere">
            <summary>
            need to merge with all the bounding spheres of our children in world space
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.Update(Microsoft.Robotics.Simulation.Engine.FrameUpdate)">
            <summary>
            Frame update. Called once per frame, before rendering but after the last frame simulation resuls have been retrieved
            </summary>
            <param name="update"><see cref="T:Microsoft.Robotics.Simulation.Engine.FrameUpdate"/></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.ProcessDeferredTaskQueue">
            <summary>
            Processes all tasks in the Entity's DeferredTaskQueue.
            Called in VisualEntity.Update(...) but you should call this
              if you override Update(...) and don't call base.Update(...)
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.PostUpdate">
            <summary>
            Make sure bounding spheres all always updated.
            'Post' as in 'happens-after', not 'Post' as in post a message.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.Render(Microsoft.Robotics.Simulation.Engine.MatrixTransforms,Microsoft.Robotics.Simulation.Engine.CameraEntity)">
            <summary>
            Renders entity's mesh
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderShadowVolume(Microsoft.Robotics.Simulation.Engine.MatrixTransforms,Microsoft.Robotics.Simulation.Engine.CameraEntity)">
            <summary>
            Renders entity's shadow volume
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.Edit">
            <summary>
            Present a user interface to edit the fields of the entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.Render2D(Microsoft.Robotics.Simulation.Engine.FloorplanRenderInfo)">
            <summary>
            Render a 2D version of the entity for the floorplan view
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.Render(Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode,Microsoft.Robotics.Simulation.Engine.MatrixTransforms,Microsoft.Robotics.Simulation.Engine.CameraEntity)">
            <summary>
            Frame render. Called once per frame after <see cref="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.Update(Microsoft.Robotics.Simulation.Engine.FrameUpdate)"/> is called
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.SetCullMode(Microsoft.Xna.Framework.Graphics.CullMode)">
            <summary>
            Set a Rasterizer state based on the requested cull mode and current fill mode
            </summary>
            <param name="mode">The request cull mode</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.Render(Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode,Microsoft.Robotics.Simulation.Engine.MatrixTransforms,Microsoft.Robotics.Simulation.Engine.VisualEntityMesh)">
            <summary>
            Render of specific mesh, using supplied transforms
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderShape(Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode,Microsoft.Robotics.Simulation.Engine.MatrixTransforms,Microsoft.Robotics.Simulation.Physics.ShapeProperties,Microsoft.Robotics.Simulation.Engine.VisualEntityMesh)">
            <summary>
            Renders a mesh using supplied physics shape properties for an additional position and orientation transform
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.GetPlaybackPose">
            <summary>
            Gets the pose this entity uses to position itself in the world for playback
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.SetPlaybackPose(Microsoft.Robotics.PhysicalModel.Pose)">
            <summary>
            Sets the pose thsi entity uses to position itself in the world for playback
            </summary>
            <param name="pose"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.CreateAndInsertPhysicsEntity(Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Using this VisualEntity instance, a new PhysicsEntity instance is created and added to the physics simulation.
            This also adds a joint to the parent entity if possible
            </summary>
            <remarks>This method must be called for the <see cref="T:Microsoft.Robotics.Simulation.Engine.VisualEntity"/> to be visible to the physics simulation</remarks>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.InitParentJoint">
            <summary>
            Initializes a rigid joint from this entity to the parent.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.ComputeJointInWorldSpace">
            <summary>
            Update joint property's of the entity in world space
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.FindConnectedEntity(System.String)">
            <summary>
            Returns the named entity if it is connected through a parent or child or sibling relationship
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.AddShapeToPhysicsEntity(Microsoft.Robotics.Simulation.Physics.Shape,Microsoft.Robotics.Simulation.Engine.VisualEntityMesh)">
            <summary>
            Adds a shape dynamically to an already initialized physics entity
            </summary>
            <param name="shape"></param>
            <param name="mesh"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.RemoveShapeFromPhysicsEntity(Microsoft.Robotics.Simulation.Physics.Shape,Microsoft.Robotics.Simulation.Engine.VisualEntityMesh)">
            <summary>
            Removes a shape that was added using AddShapeToPhysicsEntity
            </summary>
            <param name="shape"></param>
            <param name="mesh"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.InsertEntity(Microsoft.Robotics.Simulation.Engine.VisualEntity)">
            <summary>
            Base functionality for adding a child to an Entity.
            Important: Assumes child pose is relative to parent
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.InsertEntityGlobal(Microsoft.Robotics.Simulation.Engine.VisualEntity)">
            <summary>
            Inserts a child into an Entity.
            This function differs from InsertEntity in that it assumes that child is represented in 
            absolute world coordinates rathater than coordinates relative to the parent (this).
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.RemoveEntity(Microsoft.Robotics.Simulation.Engine.VisualEntity)">
            <summary>
            Base functionality for removing a child from an Entity
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.DeviceResetting(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Called when graphics device reset is starting
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.DeviceReset(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Called when graphics device reset is complete
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.RestoreJointConnectivity(System.Collections.Generic.Dictionary{System.String,Microsoft.Robotics.Simulation.Entity}@,System.Collections.Generic.Dictionary{System.String,Microsoft.Robotics.PhysicalModel.Joint}@)">
            <summary>
            This utility function restores references between joints and entities
            after deserialization.  This will fixup references between joints and
            entities for an entity and its children.  It considers joints and entities
            which are in top-level fields or lists.  This function uses reflection to 
            find the references so you may want to consider writing custom code for
            your entity.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.PrepareJointsForSerialization">
            <summary>
            This utility function searches thorugh the current entity for all references to joints
            and prepares them for serialization by copying the name of the entities they reference to
            a field that is serialized.  This name can then be used after deserialization to restore the reference.
            This function will traverse to children of an entity and considers single field joint and entity  
            references as well as lists.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.Dispose">
            <summary>
            Disposed all resources
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.Clone">
            <summary>
            Shallow clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy [DataMember] fields to target
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.GetNonChildEntities">
            <summary>
            This method returns a list of entities that are not children entities but need
            to be processed by IntersectRay or other simulation environment utilities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderBatched(Microsoft.Xna.Framework.Matrix[],System.Int32,Microsoft.Robotics.Simulation.Engine.VisualEntityMesh)">
            <summary>
            Renders a visual entity several times using shader based instancing
            </summary>
            <param name="arrayOfTransforms"></param>
            <param name="numTransforms"></param>
            <param name="mesh"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.BeginBatchRender(Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode,Microsoft.Xna.Framework.Matrix[]@)">
            <summary>
            
            </summary>
            <param name="renderMode"></param>
            <param name="arrayOfTransforms"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.BeginBatchRender(System.String,Microsoft.Xna.Framework.Matrix[]@)">
            <summary>
            
            </summary>
            <param name="techniqueName"></param>
            <param name="arrayOfTransforms"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.EndBatchRender">
            <summary>
            Must match calls with BeginBatchRender() to calls with EndBatchRender()
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.PreSerialize">
            <summary>
            Updates any filenames of embedded resources in a VisualEntity to contain the full
                path to the resource
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.GetResourceFileNames">
            <summary>
            Override this method for simulation to remember which assemblies this entity's embedded resources
              were loaded from
            </summary>
            <returns>List of filenames that point to resources that may possibly be embedded resources</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntity.PostDeserialize">
            <summary>
            Updates any filenames of embedded resources in a VisualEntity to not contain 
                the path of the resource
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.HasBeenInitialized">
            <summary>
            true if this VisualEntity has been successfully initialized
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.InitError">
            <summary>
            Contains a description of any errors that occurred during initialization
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.Flags">
            <summary>
            Flags which define the rendering and behavior of this entity.
            <seealso cref="T:Microsoft.Robotics.Simulation.Engine.VisualEntityProperties"/>
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.Children">
            <summary>
            Runtime only list of child entities so simulation engine can render and update on our behalf
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.ChildCount">
            <summary>
            Number of children, used in serialization and deserialization of VisualEntities
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.Parent">
            <summary>
            Optional Parent entity. 
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.ParentJoint">
            <summary>
            Gets the joint that connects this entity to its parent. 
            Null if either this or parent do not have physics entity.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.PhysicsJoint">
            <summary>
            Gets the joint that connects this entity to its parent. 
            Null if either this or parent do not have physics entity.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.DeferredTaskQueue">
            <summary>
            To avoid contention with physics simulation which runs in a different thread
            than what the entity APIs might get called in, we just package up the parameters
            and queue CCR tasks. During the Update method we then process the queued requests
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.EntityState">
            <summary>
            This field exposes the entity state so that the simulation editor can access it.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrame">
            <summary>
            Specifies the meaning of the entity's position
            This is used for serialization and to help with joining child entities. 
            It is not meant to be changed outside of the simulation engine.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.Position">
            <summary>
            This field exposes the entity position as an xna.Vector3 so that the simulation editor can access it.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.Rotation">
            <summary>
            This field exposes the entity rotation so that the simulation editor can access it.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.RotationAngles">
            <summary>
            This field exposes the entity rotation converted to Euler angles from the orientation quaternion.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.RotationAnglesInWorldSpace">
            <summary>
            This field exposes the entity rotation in world space converted to Euler angles from the orientation quaternion.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.ServiceContract">
            <summary>
            The contract for a service associated with this entity.  
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.EmbeddedResourceAssemblies">
            <summary>
            List of assemblies contain embedded resources this entity needs to be properly loaded
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.World">
            <summary>
            World transform
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.MeshTransform">
            <summary>
            Get the local transform the entity uses on its meshes
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.MeshScale">
            <summary>
            Gets or sets the scale of the entity meshes
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.MeshRotation">
            <summary>
            Gets or sets the rotation of the entity meshes
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.MeshTranslation">
            <summary>
            Gets or sets the translation of the entity meshes
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.Meshes">
            <summary>
            DirectX meshes used for rendering the entity in 3D
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.Effect">
            <summary>
            Vertex and pixel shader effect file (*.fx). If not specified, default effect is used
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.Device">
            <summary>
            Current graphics device
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.UsesSphereCulling">
            <summary>
            this entity uses frustum culling on rendering
            affected by children in this entity's hierarchy
            default is true, but should be false for (special effects, terrain, invisible objs)
            if true, a valid bounding sphere should be present
            we should make this internal, since we expose the DisableViewFrustumCulling flag, and this flag
             is with respect to the the hierarchy which the user shouldn't be able to set
            however, making this internal could is a breaking change to user code, do we really want 
             to do this -- not at the moment at least
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.EntityBoundingSphere">
            <summary>
            Bounding sphere approximating collision mesh for entity
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.EntityWorldBoundingSphere">
            <summary>
            Bounding sphere approximating collision mesh for entity
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderPhysicsPrimitives">
            <summary>
            True if simplified rendering (using just physics geometry) is requests
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.AddsShapeToParent">
            <summary>
            Indicates that this entity must be a child entity and that it adds 
            one or more shapes to its parent rather than defining its own shapes.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.PhysicsEntity">
            <summary>
            Instance used for modifying and inspecting physics simulation behavior for this entity
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntity.PhysicsEngine">
            <summary>
            Physics Engine instance
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.VisualEntity.WorldJointProperties">
            <summary>
            Stores properties in world space
            All data members are in world space
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode">
            <summary>
            Flag for how a mesh should be rendered
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode.Normal">
            <summary>Normal rendering, all lights</summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode.ShadowVolume">
            <summary>Use programmatically generated shadow volume for rendering</summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode.SkipShadowCasterLight">
            <summary>Use all lights but the shadow caster light</summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode.OnlyShadowCasterLight">
            <summary>Use only the shadow caster light</summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames">
            <summary>
            Specifies the meaning of the entity's position.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames.NotSet">
            <summary>
            Used for entities in older version of sim.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames.Global">
            <summary>
            Position and orientation are relative to global reference frame. 
            Used for entities with no parent, or entities with physics.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames.Local">
            <summary>
            Position and orientation are relative to parent.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.BumperArrayEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.BumperArrayEntity.#ctor(Microsoft.Robotics.Simulation.Physics.BoxShape[])">
            <summary>
            Initialization constructor
            </summary>
            <param name="shapes">Shapes to use to represent each bumper</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.BumperArrayEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.BumperArrayEntity.Subscribe(Microsoft.Ccr.Core.Port{Microsoft.Robotics.Simulation.Physics.EntityContactNotification})">
            <summary>
            Adds a notification port to the list of subscriptions that get notified when the bumper shapes
            collide in the physics world
            </summary>
            <param name="notificationTarget"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.BumperArrayEntity.Shapes">
            <summary>
            Shapes for each bumper
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.CameraEntity">
            <summary>
            Models a camera sensor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.AddSurface(System.Windows.Forms.PictureBox)">
            <summary>
            Add a PictureBox container to display the results of each render from this camera.
            </summary>
            <param name="surface"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.RemoveSurface(System.Windows.Forms.PictureBox)">
            <summary>
            Disassociate a PictureBox container from this camera.
            </summary>
            <param name="surface"></param>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraEntity._currentWriteIdx">
            <summary>
            Targets we want to read / write from
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraEntity._drawSurfaces">
            <summary>
            A list of buffered surfaces used for offscreen realtime camera rendering.
            Two kind of surfaces are needed: one for color and the other for depth
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.#ctor">
            <summary>
            base constructor: no realtime, 90 (45+45) degree FOV, 800x600 camera, first person camera model
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.#ctor(System.Int32,System.Int32)">
            <summary>
            constructor: no realtime, 90 (45+45) degree FOV, size specified by user, 1st person model
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.#ctor(System.Int32,System.Int32,Microsoft.Robotics.Simulation.Engine.CameraEntity.CameraModelType)">
            <summary>
            constructor: no realtime, 90 (45+45) degree FOV, size specified by user, model specified by user
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            constructor: no realtime, size and FOV angle specified by user, 1st person model
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.#ctor(System.Int32,System.Int32,System.Single,Microsoft.Robotics.Simulation.Engine.CameraEntity.CameraModelType)">
            <summary>
            constructor: no realtime, size and FOV angle specified by user, model specified by user
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.SetProjectionParameters(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Set camera transforms
            </summary>
            <param name="fov"></param>
            <param name="aspect"></param>
            <param name="near"></param>
            <param name="far"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.Dispose">
            <summary>
            Dispose entity resources
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.DeviceResetting(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Disposes device resources
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.DeviceReset(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Recreates device resources
            </summary>
            <param name="device"></param>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraEntity.frameBuffers">
            <summary>
            List of available buffer to fill with frame data
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraEntity.lastExceptionFromFrameBufferUpdate">
            <summary>
            Exception caught during frame buffer update
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraEntity.nextBufferIndexToUpdate">
            <summary>
            Index of buffer in frame buffer list that should filled. Consumers
            are safe to use nextBufferIndexToUpdate - 1
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.Update(Microsoft.Robotics.Simulation.Engine.FrameUpdate)">
            <summary>
            Frame update
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.UpdateInput(System.Double,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.GamePadState,System.Boolean)">
            <summary>
            Parse input devices that control camera motion
            </summary>
            <param name="elapsedTime"></param>
            <param name="keyboardState"></param>
            <param name="mouseState"></param>
            <param name="gamepadState"></param>
            <param name="hasFocus"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.SetViewParameters(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Queue request for updating view parameters
            </summary>
            <param name="eyeLocation"></param>
            <param name="lookAtPoint"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.CaptureScene(Microsoft.Ccr.Core.PortSet{System.Int32[],System.Exception})">
            <summary>
            Queue request to capture scene to integer array.
            Can be used to avoid races with only reading the data in other threads,
                whereas Bitmap's GetPixel() cannot be called from another thread when the
                sim thread is using it.
            User is responsible for ensuring only the returned array is not being written
                to when the simulation engine is using it.
            Suggested use is to either only read the returned array or create a copy
                of the array in the callee's thread.
            </summary>
            <param name="resultPort">Result port</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.CreateBitmapFromArray(System.Int32[])">
            <summary>
            Creates a bitmap given an integer pixel array
            </summary>
            <param name="imageData32bitBgra">Pixel data in 32bit packed format</param>
            <returns>Bitmap instance</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.UpdateFrameBuffersFromRenderTargetSurface(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            Copy the image bits from a render target surface to a bitmap
            </summary>
            <param name="rtSurface"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraEntity.RecentImage">
            <summary>
            Indicates that an image was rendered with this camera last frame
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.UpdateWriteSurface">
            <summary>
            Call once a frame before SetRenderTarget
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraEntity.UpdateReadIndex">
            <summary>
            Skips trying to read any old frames, moving onto newer frames that were rendered
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.IsRealTimeCamera">
            <summary>
            If true the camera is a realtime camera and renders at each frame
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.UpdateInterval">
            <summary>
            This time indicates the amount of time between frame updates in milliseconds.
            0 means that the camera never updates on its own but must be queried.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.ShadowDisplay">
            <summary>
            Gets or sets whether the camera should be rendering shadows
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.CameraModel">
            <summary>
            Specifies the model used by the camera entity.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.Near">
            <summary>
            Distance to the near clipping plane
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.Far">
            <summary>
            Distance to the far clipping plane
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.ViewSizeX">
            <summary>
            Camera horizontal resolution, used for offscreen realtime camera rendering
            can only be initialized at constuction time
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.Width">
            <summary>
            Camera horizontal resolution (read-only)
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.ViewSizeY">
            <summary>
            Camera vertical resolution, used for offscreen realtime camera rendering
            can only be initialized at constuction time
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.Height">
            <summary>
            Camera vertical resolution (read-only)
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.ViewAngle">
            <summary>
            Rendering camera FOV angle, used for offscreen realtime camera rendering
            careful, this angle is in fact HALF of the total FOV
            can only be initialized at constuction time
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.FieldOfView">
            <summary>
            Camera vertical resolution in degrees
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.Aspect">
            <summary>
            Aspect ratio (width/height) of the camera view (read-only)
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.WriteSurface">
            <summary>
            Surface we write to
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.ReadSurface">
            <summary>
            Surface we read from
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.IsPhysicsVisible">
            <summary>
            If true the camera can interact with the physics simulation
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.Eye">
            <summary>
            Eye point of camera
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.Forward">
            <summary>
            Look vector of camera
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.LensEffect">
            <summary>
            Custom lens effect used for rendering
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.ProjectionMatrix">
            <summary>
            Projection matrix
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.ViewMatrix">
            <summary>
            View matrix
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.LookAt">
            <summary>
            The center of the camera view
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraEntity.Location">
            <summary>
            The location of the camera
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.CameraEntity.ShadowDisplayMode">
            <summary>
            Flags to enable or disable shadow rendering by the camera
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraEntity.ShadowDisplayMode.Invalid">
            <summary>Special value so that we don't get an invalid value from proxy objects</summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraEntity.ShadowDisplayMode.ShowShadows">
            <summary>Camera should show shadows</summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraEntity.ShadowDisplayMode.HideShadows">
            <summary>Camera should not show shadows</summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.CameraEntity.CameraModelType">
            <summary>
            Flags to specify the camera model
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraEntity.CameraModelType.FirstPerson">
            <summary>
            Main camera.  Uses a location and look-at point to specify the position and orientation.
            Moves only in Pitch and Yaw.  Up is always oriented in the +Y direction.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraEntity.CameraModelType.AttachedChild">
            <summary>
            A camera attached to another object.  Uses the pose of the camera entity to define its position and orientation.
            Moves in Pitch, Yaw, and Roll.  Up depends on the orientation of the camera entity.
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.CameraView">
            <summary>
            Specifies a camera position and look-at point
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraView.EyePosition">
            <summary>
            The location of the camera
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraView.LookAtPoint">
            <summary>
            The point the camera is looking at
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraView.XResolution">
            <summary>
            The pixel width of the camera image.  0 means don't change.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraView.YResolution">
            <summary>
            The pixel height of the camera image.  0 means don't change.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraView.CameraName">
            <summary>
            The name of the camera entity to set as the default camera.
            Empty string means no change.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraView.RenderMode">
            <summary>
            The render mode for the default camera.
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity">
            <summary>
            Models a laser range finder using physics raycasting to determine impact points
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity.#ctor(Microsoft.Robotics.PhysicalModel.Pose)">
            <summary>
            Initialization constructor
            </summary>
            <param name="localPose"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity.Update(Microsoft.Robotics.Simulation.Engine.FrameUpdate)">
            <summary>
            Frame update
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity.Render(Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode,Microsoft.Robotics.Simulation.Engine.MatrixTransforms,Microsoft.Robotics.Simulation.Engine.CameraEntity)">
            <summary>
            Frame render
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity.Register(Microsoft.Ccr.Core.Port{Microsoft.Robotics.Simulation.Physics.RaycastResult})">
            <summary>
            Registers a port for queueing raycast results from the physics engine
            </summary>
            <param name="notificationTarget"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity.ElapsedSinceLastScan">
            <summary>
            Time since last update
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity.ApplicationTime">
            <summary>
            Application time
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity.RaycastResultsPort">
            <summary>
            Port where raycast results are posted
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity.LastResults">
            <summary>
            Latest raycast results
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity.ScanInterval">
            <summary>
            We scan 5 times a second
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity.RaycastProperties">
            <summary>
            Raycast configuration
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity.LaserBox">
            <summary>
            Geometric representation of laser physical sensor
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity.ImpactPointEffect">
            <summary>
            Filename of impact point effect
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.DepthCamBasedRaycastSensorEntity">
            <summary>
            Models a sensor that uses a simulated depth cam to make raycasts
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity">
            <summary>
            Models a camera sensor
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.outstandingUpdates">
            <summary>
            The outstanding updates
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.resultsPorts">
            <summary>
            The result ports
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.#ctor(System.Int32,System.Int32,System.Single,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity"/> class.
            </summary>
            <param name="viewSizeX">The view size X.</param>
            <param name="viewSizeY">The view size Y.</param>
            <param name="viewAngle">The view angle.</param>
            <param name="shader">Shader file name to use for this depth camera</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.Register(Microsoft.Ccr.Core.Port{Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.DepthCameraResult})">
            <summary>
            Registers the specified results port.
            </summary>
            <param name="resultsPort">The results port.</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialize as real -time camera with special lens effect
            </summary>
            <param name="device">The graphics device</param>
            <param name="physicsEngine">The physics engine</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.Update(Microsoft.Robotics.Simulation.Engine.FrameUpdate)">
            <summary>
            Updates shader vars
            </summary>
            <param name="update">The frame update</param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.ShaderFile">
            <summary>
            The filename of the HLSL file to use as a depth camera pixel shader
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.DepthCameraResult">
            <summary>
            Current depth image
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.DepthCameraResult.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.DepthCameraResult.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.DepthCameraResult.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.StandardShaders">
            <summary>
            Contains definitions for a standard set of shader files
            used for depth camera simulations
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.StandardShaders.Kinect">
            <summary>
            Simulates the standard Kinect behavoir
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.StandardShaders.ExtendedKinect">
            <summary>
            Simulates an alternate Kinect with a greater range of detection
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.StandardShaders.IRSensor">
            <summary>
            Simulates an IR sensor with up to 2 meters of detection
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.StandardShaders.SonarSensor">
            <summary>
            Simulates a sonar sensor
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.DepthCameraProperties">
            <summary>
            Properties for the depth camera
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.DepthCameraProperties.MaxRange">
            <summary>
            Gets or sets the max range.
            </summary>
            <value>
            The max range.
            </value>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.DepthCameraProperties.MinRange">
            <summary>
            Gets or sets the min range.
            </summary>
            <value>
            The min range.
            </value>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.DepthCameraProperties.ViewSizeX">
            <summary>
            Gets or sets the view size X.
            </summary>
            <value>
            The view size X.
            </value>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.DepthCameraProperties.ViewSizeY">
            <summary>
            Gets or sets the view size Y.
            </summary>
            <value>
            The view size Y.
            </value>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.DepthCameraProperties.FieldOfView">
            <summary>
            Gets or sets the field of view.
            </summary>
            <value>
            The field of view.
            </value>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DepthCamBasedRaycastSensorEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DepthCamBasedRaycastSensorEntity.#ctor(Microsoft.Robotics.PhysicalModel.Pose,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="localPose"></param>
            <param name="maxRange"></param>
            <param name="minRange"></param>
            <param name="radianAngleOfProjection"></param>
            <param name="shader">Shader file name to use for this depth camera</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DepthCamBasedRaycastSensorEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DepthCamBasedRaycastSensorEntity.DepthCamResultsHandler(Microsoft.Robotics.Simulation.Engine.DepthCameraEntity.DepthCameraResult)">
            <summary>
            Handles updates from the depth camera
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DepthCamBasedRaycastSensorEntity.LatestReading">
            <summary>
            Latest reading
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DepthCamBasedRaycastSensorEntity.MaximumRange">
            <summary>
             The maximum range of this sensor
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DepthCamBasedRaycastSensorEntity.MinimumRange">
            <summary>
            The minimum range of this sensor
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.IREntity">
            <summary>
            Models an infrared sensor using a depth camera
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.IREntity.DefaultMaximumIRRange">
            <summary>
            Default Max range is .8m
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.IREntity.DefaultMinimumIRRange">
            <summary>
            Default Min range is .1m
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.IREntity.DefaultRadianAngleOfProjection">
            <summary>
            Default IR has a very narrow cone. 2 degree total
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.IREntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.IREntity.#ctor(Microsoft.Robotics.PhysicalModel.Pose)">
            <summary>
            Initialization constructor
            </summary>
            <param name="localPose"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.IREntity.#ctor(Microsoft.Robotics.PhysicalModel.Pose,System.Single,System.Single,System.Single)">
            <summary>
            Initialization constructor
            </summary>
            <param name="localPose">Pose of IREntity</param>
            <param name="maxRange">Maximum range in meters that this sensor can detect</param>
            <param name="minRange">Minimum range in meters that this sensor can detect</param>
            <param name="radianAngleOfProjection">Full angular size of detection cone in radians</param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SonarEntity">
            <summary>
            Models an sonar sensor using a depth camera
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SonarEntity.DefaultMaximumIRRange">
            <summary>
            Default Max range is 2m
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SonarEntity.DefaultMinimumIRRange">
            <summary>
            Default Min range is .1m
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SonarEntity.DefaultRadianAngleOfProjection">
            <summary>
            Default Sonar has a large cone - 45 degrees
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SonarEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SonarEntity.#ctor(Microsoft.Robotics.PhysicalModel.Pose)">
            <summary>
            Initialization constructor
            </summary>
            <param name="localPose"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SonarEntity.#ctor(Microsoft.Robotics.PhysicalModel.Pose,System.Single,System.Single,System.Single)">
            <summary>
            Initialization constructor
            </summary>
            <param name="localPose">Pose of SonarEntity</param>
            <param name="maxRange">Maximum range in meters that this sensor can detect</param>
            <param name="minRange">Minimum range in meters that this sensor can detect</param>
            <param name="radianAngleOfProjection">Full angular size of detection cone in radians</param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.MicrosoftGpsEntity">
            <summary>
            An entity simulating a Microsoft GPS device.
            NOTE: Prototype, not functioning yet
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.MicrosoftGpsEntity.SCAN_INTERVAL">
            <summary>
            Ray cast interval
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.MicrosoftGpsEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.MicrosoftGpsEntity.#ctor(Microsoft.Robotics.PhysicalModel.Pose)">
            <summary>
            Initialization constructor
            </summary>
            <param name="localPose"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.MicrosoftGpsEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.MicrosoftGpsEntity.Update(Microsoft.Robotics.Simulation.Engine.FrameUpdate)">
            <summary>
            Frame update
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.MicrosoftGpsEntity.Register(Microsoft.Ccr.Core.Port{System.Collections.Generic.List{System.Boolean}})">
            <summary>
            Register port for sending notifications
            </summary>
            <param name="notificationTarget"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.MicrosoftGpsEntity.AddSatellite(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Add satellite position
            </summary>
            <param name="position"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.MicrosoftGpsEntity.SatelliteLocations">
            <summary>
            Simulated satellite positions
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.MicrosoftGpsEntity.GpsUnit">
            <summary>
            Geometric representation of physical sensor unit
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.WheelEntity">
            <summary>
            Rendering wrapper around PhysicsWheel shape. If you are not interested in rendering
            just use PhysicsWheel directly
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.WheelEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.WheelEntity.#ctor(System.Single,System.Single,Microsoft.Robotics.PhysicalModel.Vector3,System.Single)">
            <summary>
            Initialization constructor
            </summary>
            <param name="mass"></param>
            <param name="radius"></param>
            <param name="position"></param>
            <param name="YRotationDegrees"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.WheelEntity.#ctor(Microsoft.Robotics.Simulation.Physics.WheelShapeProperties)">
            <summary>
            Initialization constructor
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.WheelEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.WheelEntity.Dispose">
            <summary>
            Remove the wheel shape from the parent on dispose
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.WheelEntity.Update(Microsoft.Robotics.Simulation.Engine.FrameUpdate)">
            <summary>
            Frame update
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.WheelEntity.Render(Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode,Microsoft.Robotics.Simulation.Engine.MatrixTransforms,Microsoft.Robotics.Simulation.Engine.CameraEntity)">
            <summary>
            Frame render
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.WheelEntity.GetPlaybackPose">
            <summary>
            Wheel entity uses localpose
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.WheelEntity.SetPlaybackPose(Microsoft.Robotics.PhysicalModel.Pose)">
            <summary>
            Wheel entity uses localpose
            </summary>
            <param name="pose"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.WheelEntity.Wheel">
            <summary>
            Physics entity simulating wheel.
            <remarks>Used for modifying and inspecting state while simulation is active</remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.WheelEntity.WheelShape">
            <summary>
            Wheel shape instance
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.WheelEntity.Rotations">
            <summary>
            A count of wheel rotations.
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.KukaLBR3Entity">
            <summary>
            Models KUKA LBR3 robotic arm
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SingleShapeEntity">
            <summary>
            Models a single geometric shape with physical properties.
            </summary>
            <remarks>Use this to quickly add an arbitrary graphics mesh in the simulation, using an simple physical geometry to approximate collisions for physics</remarks>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SingleShapeEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SingleShapeEntity.#ctor(Microsoft.Robotics.Simulation.Physics.Shape,Microsoft.Robotics.PhysicalModel.Vector3)">
            <summary>
            Initialization constructor
            </summary>
            <param name="shape"></param>
            <param name="initialPos"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SingleShapeEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SingleShapeEntity.BoxShape">
            <summary>
            Box shape. Valid if no other shape instance is set
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SingleShapeEntity.SphereShape">
            <summary>
            Sphere shape. Valid if no other shape instance is set
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SingleShapeEntity.CapsuleShape">
            <summary>
            Capsule shape. Valid if no other shape instance is set
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.KukaLBR3Entity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.KukaLBR3Entity.#ctor(Microsoft.Robotics.PhysicalModel.Vector3)">
            <summary>
            Initialization constructor
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.KukaLBR3Entity.SetJointTargetOrientation(Microsoft.Robotics.PhysicalModel.Joint,Microsoft.Robotics.PhysicalModel.AxisAngle)">
            <summary>
            Sets orientation only for angular drives
            </summary>
            <param name="j"></param>
            <param name="axisAngle"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.KukaLBR3Entity.SetJointTargetPose(Microsoft.Robotics.PhysicalModel.Joint,Microsoft.Robotics.PhysicalModel.Pose)">
            <summary>
            Sets position and orientation depending on the DOF configuration of the joint
            </summary>
            <param name="j"></param>
            <param name="pose"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.KukaLBR3Entity.SetJointTargetVelocity(Microsoft.Robotics.PhysicalModel.Joint,Microsoft.Robotics.PhysicalModel.Vector3)">
            <summary>
            Sets angular or linear velocity
            </summary>
            <param name="j"></param>
            <param name="velocity"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.KukaLBR3Entity.Joints">
            <summary>
            Joints
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.KukaLBR3Entity.CustomJointSingleShapeEntity">
            <summary>
            Defines a new entity type that overrides the ParentJoint with 
            custom joint properties.  It also handles serialization and
            deserialization properly.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.KukaLBR3Entity.CustomJointSingleShapeEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.KukaLBR3Entity.CustomJointSingleShapeEntity.#ctor(Microsoft.Robotics.Simulation.Physics.Shape,Microsoft.Robotics.PhysicalModel.Vector3)">
            <summary>
            Initialization constructor
            </summary>
            <param name="shape"></param>
            <param name="initialPos"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.KukaLBR3Entity.CustomJointSingleShapeEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization override which adds support for custom joint initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.KukaLBR3Entity.CustomJointSingleShapeEntity.CustomJoint">
            <summary>
            A custom joint definition used for the ParentJoint
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity">
            <summary>
            Models a differential drive motor base with two active wheels and one caster
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.MASS">
            <summary>
            Chassis mass in kilograms
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.CHASSIS_DIMENSIONS">
            <summary>
            Chassis dimensions
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.LEFT_FRONT_WHEEL_POSITION">
            <summary>
            Left front wheel position
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.RIGHT_FRONT_WHEEL_POSITION">
            <summary>
            Right front wheel position
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.CASTER_WHEEL_POSITION">
            <summary>
            Caster wheel position
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.CHASSIS_CLEARANCE">
            <summary>
            Distance from ground of chassis
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.FRONT_WHEEL_MASS">
            <summary>
            Mass of front wheels
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.FRONT_WHEEL_RADIUS">
            <summary>
            Radius of front wheels
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.CASTER_WHEEL_RADIUS">
            <summary>
            Caster wheel radius
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.FRONT_WHEEL_WIDTH">
            <summary>
            Front wheels width
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.CASTER_WHEEL_WIDTH">
            <summary>
            Caster wheel width
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.FRONT_AXLE_DEPTH_OFFSET">
            <summary>
            distance of the axle from the center of robot
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.ProgrammaticallyBuildModel(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Builds the simulated robotic entity using local fields for positionm size, orientation
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.ConstructStateMembers">
            <summary>
            Call this in the non-default constructor on an entity derived from
            DifferentialDriveEntity after setting CASTER_WHEEL_POSITION and 
            CASTER_WHEEL_RADIUS
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.ConstructWheels">
            <summary>
            Constructs the wheel components
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.Dispose">
            <summary>
            Special dispose to handle embedded entities
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.Update(Microsoft.Robotics.Simulation.Engine.FrameUpdate)">
            <summary>
            Updates pose for our entity. We override default implementation
            since we control our own rendering when no file mesh is supplied, which means
            we dont need world transform updates
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.Render(Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode,Microsoft.Robotics.Simulation.Engine.MatrixTransforms,Microsoft.Robotics.Simulation.Engine.CameraEntity)">
            <summary>
            Render entities stored as fields
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.DriveDistance(System.Single,System.Single,Microsoft.Ccr.Core.Port{Microsoft.Robotics.Simulation.Engine.OperationResult})">
            <summary>
            Applies constant power to both wheels, driving the motor base for a fixed distance, in the current direction
            </summary>
            <param name="distance">Distance to travel, in meters</param>
            <param name="power">Normalized power (torque) value for both wheels</param>
            <param name="responsePort">A port to report the result of the request, success or exception</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.RotateDegrees(System.Single,System.Single,Microsoft.Ccr.Core.Port{Microsoft.Robotics.Simulation.Engine.OperationResult})">
            <summary>
            Applies constant power to each wheel (but of inverse polarity), rotating the motor base 
            through the given rotation.
            </summary>
            <param name="degrees">Rotation around Y axis, in degrees.</param>
            <param name="power">Normalized power (torque) value for both wheels</param>
            <param name="responsePort">A port to report the result of the request, success or exception</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.ResetRotationAndDistance">
            <summary>
            When a direct update to motor torque or wheel velocity occurs
            we abandon any current DriveDistance or RotateDegrees commands
            </summary>
            <summary>
            When a direct update to motor torque or wheel velocity occurs
            we abandon any current DriveDistance or RotateDegrees commands
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.SetMotorTorque(System.Single,System.Single)">
            <summary>
            Sets motor torque on the active wheels
            </summary>
            <param name="leftWheel"></param>
            <param name="rightWheel"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.SetVelocity(System.Single)">
            <summary>
            Sets angular velocity (radians/sec) on both wheels
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.SetVelocity(System.Single,System.Single)">
            <summary>
            Sets angular velocity on the wheels
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.WheelMesh">
            <summary>
            Mesh file for front wheels
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.IsEnabled">
            <summary>
            True if drive mechanism is enabled
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.MotorTorqueScaling">
            <summary>
            Scaling factor to apply to motor torque requests
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.RightWheel">
            <summary>
            Right wheel child entity
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.LeftWheel">
            <summary>
            Left wheel child entity
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.ChassisShape">
            <summary>
            Chassis physics shapes
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.CasterWheelShape">
            <summary>
            Caster wheel physics shape
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.RotateDegreesAngleThreshold">
            <summary>
            Threshold, in radians, for stopping rotation
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.TimeoutSeconds">
            <summary>
            The timeout for DriveDistance and RotateDegrees commands in seconds.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DifferentialDriveEntity.CurrentHeading">
            <summary>
            Current heading, in radians, of robot base
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.MotorBase">
            <summary>
            MotorBase is an implementation of the differential drive entity. 
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.MotorBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.MotorBase.#ctor(Microsoft.Robotics.PhysicalModel.Vector3)">
            <summary>
            Initialization constructor
            </summary>
            <param name="initialPos"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.Pioneer3DX">
            <summary>
            MobileRobots Pioneer3DX implementation of the differential entity. It just specifies different physical properties in
            its custom constructor, otherwise uses the base class as is.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Pioneer3DX.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Pioneer3DX.#ctor(Microsoft.Robotics.PhysicalModel.Vector3)">
            <summary>
            Initialization constructor
            </summary>
            <param name="initialPos"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.LegoNXTTribot">
            <summary>
            Lego NXT variant of the motor base entity. It just specifies different physical properties in
            its custom constructor, otherwise uses the base class as is.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.LegoNXTTribot.#ctor">
            <summary>
            Default constructor, used for creating the entity from an XML description
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.LegoNXTTribot.#ctor(Microsoft.Robotics.PhysicalModel.Vector3)">
            <summary>
            Custom constructor for building model from hardcoded values. Used to create entity programmatically
            </summary>
            <param name="initialPos"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.IRobotCreate">
            <summary>
            IRobotCreate variant of the motor base entity. It just specifies different physical properties in
            its custom constructor, otherwise uses the base class as is.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.IRobotCreate.#ctor">
            <summary>
            Default constructor, used for creating the entity from an XML description
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.IRobotCreate.#ctor(Microsoft.Robotics.PhysicalModel.Vector3)">
            <summary>
            Custom constructor for building model from hardcoded values. Used to create entity programmatically
            </summary>
            <param name="initialPos"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.IRobotCreate.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.IRobotCreate.Subscribe(Microsoft.Ccr.Core.Port{Microsoft.Robotics.Simulation.Physics.EntityContactNotification})">
            <summary>
            Adds a notification port to the list of subscriptions that get notified when the bumper shapes
            collide in the physics world
            </summary>
            <param name="notificationTarget"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.IRobotCreate.frontWheelShape">
            <summary>
            front wheel physics shape
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.IRobotCreate.Bumpers">
            <summary>
            Shapes for each bumper
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.IRobotCreate.PlayButtonPressed">
            <summary>
            Indicates that the Play button is pressed.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.IRobotCreate.AdvanceButtonPressed">
            <summary>
            Indicates that the Advance button is pressed.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.IRobotCreate.CliffLeft">
            <summary>
            The analog value of the left cliff sensor.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.IRobotCreate.CliffFrontLeft">
            <summary>
            The analog value of the front left cliff sensor.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.IRobotCreate.CliffRight">
            <summary>
            The analog value of the right cliff sensor.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.IRobotCreate.CliffFrontRight">
            <summary>
            The analog value of the front left cliff sensor.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.IRobotCreate.BumperLeft">
            <summary>
            Indicates that the left bumper is in contact with another object.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.IRobotCreate.BumperRight">
            <summary>
            Indicates that the right bumper is in contact with another object.
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SkyEntity">
            <summary>
            Rendering only (not part of physics simulation) entity used to render a sky
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SkyEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SkyEntity.#ctor(System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="visualCubeTextureFile">filename of texture used to draw the sky</param>
            <param name="lightingCubeTextureFile">filename of texture used to light the scene</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SkyEntity.Render(Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode,Microsoft.Robotics.Simulation.Engine.MatrixTransforms,Microsoft.Robotics.Simulation.Engine.CameraEntity)">
            <summary>
            Positions the sky so that it is always centered around the camera before rendering
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SkyEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SkyEntity.PostDeserialize">
            <summary>
            Old scene files will deserialize FogStart and FogEnd to 0.
            These are bad values for fog, so give them good defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SkyEntity.VisualTexture">
            <summary>
            Filename of cube map used to draw the sky.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SkyEntity.VisualCubeTexture">
            <summary>
            Cube map used to draw the sky
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SkyEntity.LightingTexture">
            <summary>
            Filename of cube map used to diffuse light objects in the scene
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SkyEntity.LightingCubeTexture">
            <summary>
            Cube map used to diffuse light objects in the scene
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SkyEntity.FogColor">
            <summary>
            Get or set fog color of the sky
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SkyEntity.FogStart">
            <summary>
            Get or set the point at which fog starts
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SkyEntity.FogEnd">
            <summary>
            Get or set the point at which fog ends
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SkyDomeEntity">
            <summary>
            Sky entity that uses a 2D dome texture rather than a cube map.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SkyDomeEntity.#ctor">
            <summary>
            Default empty constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SkyDomeEntity.#ctor(System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SkyDomeEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
             <summary>
            
             </summary>
             <param name="device"></param>
             <param name="physicsEngine"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.MultiShapeEntity">
            <summary>
            Models an entity with multiple shapes, with fixed pose with respect to each other.
            </summary>
            <remarks>This entity should be used to model composite rigid objects</remarks>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.MultiShapeEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.MultiShapeEntity.#ctor(Microsoft.Robotics.Simulation.Physics.BoxShape[],Microsoft.Robotics.Simulation.Physics.SphereShape[])">
            <summary>
            Constructor which allows shapes to be specified
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.MultiShapeEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.MultiShapeEntity.BoxShapes">
            <summary>
            List of box shapes that make up the entity
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.MultiShapeEntity.SphereShapes">
            <summary>
            List of sphere shapes that make up the entity
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.MeshEntityType">
            <summary>
            Types of mesh entities
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.MeshEntityType.Box">
            <summary>
            The physics object is the bounding box of the mesh.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.MeshEntityType.Sphere">
            <summary>
            The physics object is the bounding sphere of the mesh.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.MeshEntityType.Convex">
            <summary>
            The physics object is the convex mesh of the mesh.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.MeshEntityType.Triangle">
            <summary>
            The physics object is the same as the input mesh.
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.MeshEntity">
            <summary>
            An entity that has one or more physics shapes based on a mesh.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.MeshEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.MeshEntity.#ctor(Microsoft.Robotics.Simulation.Engine.MeshEntityType,Microsoft.Robotics.PhysicalModel.Vector3,System.String,System.Single)">
            <summary>
            Initialization constructor
            </summary>
            <param name="type"></param>
            <param name="initialPos"></param>
            <param name="meshResource"></param>
            <param name="mass"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.MeshEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.MeshEntity.MeshEntityType">
            <summary>
            The type of the mesh entity
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.MeshEntity.Material">
            <summary>
            The physics material for the shape to use.  Must be specified
            before initialization.
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SimplifiedConvexMeshEnvironmentEntity">
            <summary>
            Generates a simplified convex hull for physics collisitions, using convex mesh data
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimplifiedConvexMeshEnvironmentEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimplifiedConvexMeshEnvironmentEntity.#ctor(Microsoft.Robotics.PhysicalModel.Vector3,System.String,Microsoft.Robotics.Simulation.Physics.Shape)">
            <summary>
            Initialization constructor
            </summary>
            <param name="initialPos"></param>
            <param name="meshResource"></param>
            <param name="physicsShape"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimplifiedConvexMeshEnvironmentEntity.ConvexMeshShape">
            <summary>
            Generated convex mesh shape
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.FloorplanItemType">
            <summary>
            The types of items supported by the floorplan entity
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FloorplanItemType.Wall">
            <summary>
            A simple wall item
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FloorplanItemType.Door">
            <summary>
            A 2.13 meter high door
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FloorplanItemType.Window">
            <summary>
            A 0.61 meter tall window 1.524 meters above the ground
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.TriangleMeshEnvironmentEntity">
            <summary>
            Generates a physics collision mesh using the same exact geometry as a triangle based graphics mesh
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.TriangleMeshEnvironmentEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.TriangleMeshEnvironmentEntity.#ctor(Microsoft.Robotics.PhysicalModel.Vector3,System.String,Microsoft.Robotics.Simulation.Physics.Shape)">
            <summary>
            Initialization constructor
            </summary>
            <param name="initialPos"></param>
            <param name="meshResource"></param>
            <param name="physicsShape"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.TriangleMeshEnvironmentEntity.TriangleMeshShape">
            <summary>
            Triangle Mesh shape
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.FloorplanItemInstance">
            <summary>
            A user-instance of a floorplan item
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FloorplanItemInstance.Attributes">
            <summary>
            Attributes of the item
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FloorplanItemInstance.AttributeClass">
            <summary>
            A class that holds the parameter types
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanItemInstance.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanItemInstance.#ctor(System.Single,System.Single,System.Single,System.Single,Microsoft.Robotics.Simulation.Engine.FloorplanItemType,Microsoft.Robotics.Simulation.Engine.FloorplanEntity)">
            <summary>
            Data Constructor
            </summary>
            <param name="pt1X"></param>
            <param name="pt1Z"></param>
            <param name="pt2X"></param>
            <param name="pt2Z"></param>
            <param name="type"></param>
            <param name="owner"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanItemInstance.BeginEdit">
            <summary>
            This method updates reads the attributes from the attributes dictionary and updates
            the attributes class.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanItemInstance.EndEdit">
            <summary>
            This method updates the attributes dictionary with the new attributes so that
            the item can be properly serialized.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FloorplanItemInstance.Type">
            <summary>
            The type of this instance
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FloorplanItemInstance.Pt1">
            <summary>
            The first point that defines the position of the item
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FloorplanItemInstance.Pt2">
            <summary>
            The second point that defines the position of the item
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FloorplanItemInstance.Owner">
            <summary>
            The floorplan entity that owns this instance
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.WallAttributes">
            <summary>
            Wall Attributes
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.WallAttributes.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.WallAttributes.GetValues(System.Collections.Generic.Dictionary{System.String,System.String},Microsoft.Robotics.Simulation.Engine.FloorplanEntity)">
            <summary>
            Get the values from the attributes dictionary
            </summary>
            <param name="attributes"></param>
            <param name="defaults"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.WallAttributes.Validate">
            <summary>
            Check that the attributes fall within valid ranges.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.WallAttributes.SetValues(System.Collections.Generic.Dictionary{System.String,System.String},Microsoft.Robotics.Simulation.Engine.FloorplanEntity)">
            <summary>
            Set the values in the attributes dictionary
            </summary>
            <param name="attributes"></param>
            <param name="defaults"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.WallAttributes.Thickness">
            <summary>
            Wall thickness
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.WallAttributes.Height">
            <summary>
            Wall height
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.DoorAttributes">
            <summary>
            Attributes of the door item
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DoorAttributes.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DoorAttributes.GetValues(System.Collections.Generic.Dictionary{System.String,System.String},Microsoft.Robotics.Simulation.Engine.FloorplanEntity)">
            <summary>
            Get the values from the attributes dictionary
            </summary>
            <param name="attributes"></param>
            <param name="defaults"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DoorAttributes.Validate">
            <summary>
            Check that the attributes fall within valid ranges.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DoorAttributes.SetValues(System.Collections.Generic.Dictionary{System.String,System.String},Microsoft.Robotics.Simulation.Engine.FloorplanEntity)">
            <summary>
            Set the values in the attributes dictionary
            </summary>
            <param name="attributes"></param>
            <param name="defaults"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DoorAttributes.TopOfOpening">
            <summary>
            The height of the top of the opening in meters
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.WindowAttributes">
            <summary>
            Attributes of the window item
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.WindowAttributes.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.WindowAttributes.GetValues(System.Collections.Generic.Dictionary{System.String,System.String},Microsoft.Robotics.Simulation.Engine.FloorplanEntity)">
            <summary>
            Get the values from the attributes dictionary
            </summary>
            <param name="attributes"></param>
            <param name="defaults"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.WindowAttributes.Validate">
            <summary>
            Check that the attributes fall within valid ranges.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.WindowAttributes.SetValues(System.Collections.Generic.Dictionary{System.String,System.String},Microsoft.Robotics.Simulation.Engine.FloorplanEntity)">
            <summary>
            Set the values in the attributes dictionary
            </summary>
            <param name="attributes"></param>
            <param name="defaults"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.WindowAttributes.BottomOfOpening">
            <summary>
            The height of the bottom of the opening in meters
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.FloorplanItem">
            <summary>
            Base class for items that make up a floor plan
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FloorplanItem.Name">
            <summary>
            The name of the item
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FloorplanItem.Type">
            <summary>
            The type of the item
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanItem.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanItem.#ctor(System.String,Microsoft.Robotics.Simulation.Engine.FloorplanItemType)">
            <summary>
            Data constructor
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.FloorplanEntity">
            <summary>
            Models a building with walls, doors, and windows as well as other structures such as 
            mazes and even lines painted on the floor.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.Items">
            <summary>
            All of the items contained by the floorplan entity
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.Instances">
            <summary>
            The instances of floorplan items
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.#ctor(Microsoft.Robotics.PhysicalModel.Vector3,System.Collections.Generic.List{Microsoft.Robotics.Simulation.Engine.FloorplanItemInstance})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.AddPhysicsShapesAndMeshes(Microsoft.Robotics.Simulation.Engine.FloorplanRenderInfo,Microsoft.Robotics.Simulation.Engine.FloorplanItemInstance)">
            <summary>
            Create and add the physics shapes for an item instance
            </summary>
            <param name="info"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.IsContained(System.Int32,System.Int32,Microsoft.Robotics.Simulation.Engine.FloorplanRenderInfo,Microsoft.Robotics.Simulation.Engine.FloorplanItemInstance)">
            <summary>
            Returns true if the specified screen point is contained by the item
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="info"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.DrawUnderlay(Microsoft.Robotics.Simulation.Engine.FloorplanRenderInfo)">
            <summary>
            Draws the floorplan underlay image
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.Render2D(Microsoft.Robotics.Simulation.Engine.FloorplanRenderInfo)">
            <summary>
            2D floorplan mode rendering
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.RenderInstance2D(Microsoft.Robotics.Simulation.Engine.FloorplanItemInstance,Microsoft.Robotics.Simulation.Engine.FloorplanRenderInfo)">
            <summary>
            Render a floorplan item to a 2D image
            </summary>
            <param name="instance"></param>
            <param name="info"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.ProcessKeys(Microsoft.Xna.Framework.Input.KeyboardState)">
            <summary>
            Handle keypresses
            </summary>
            <param name="kbState"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.MouseDown(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState)">
            <summary>
            MouseDown
            </summary>
            <param name="state"></param>
            <param name="keyboard"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.MouseDrag(Microsoft.Xna.Framework.Vector2,Microsoft.Robotics.PhysicalModel.Vector2)">
            <summary>
            MouseDrag - returns true if the floorplan entity consumes the drag
            </summary>
            <param name="pos"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.MouseUp">
            <summary>
            MouseUp
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.Edit">
            <summary>
            Edit Mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.SetFloorplanItemAttributes(Microsoft.Robotics.Simulation.Engine.FloorplanItemInstance)">
            <summary>
            Display floorplanitem properties
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.DefaultWallThickness">
            <summary>
            The thickness of each wall.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.DefaultWallHeight">
            <summary>
            The height of each wall.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.DefaultBottomOfOpening">
            <summary>
            The default height of the bottom of a window.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.DefaultTopOfOpening">
            <summary>
            The default top height of a window or door
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.UnderlayImage">
            <summary>
            Specifies the filename of the underlay image
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.UnderlayOffset">
            <summary>
            Specifies the X,Y position of the underlay center
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.UnderlayScale">
            <summary>
            The distance the width of the underlay covers in meters
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FloorplanEntity.SnapToGridSpacing">
            <summary>
            The spacing of the snap-to grid.  0 means no snap.
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.HeightFieldEntity">
            <summary>
            Models a terrain composed out of height field samples
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.HeightFieldEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.HeightFieldEntity.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initialization constructor picked up by the simulation editor
            </summary>
            <param name="textureResource">Texture file to overlay over the height field</param>
            <param name="restitution">Restitution constant for ground</param>
            <param name="dynamicFriction">Dynamic friction constant for ground</param>
            <param name="staticFriction">Static friction constant for ground</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.HeightFieldEntity.#ctor(System.String,System.String,Microsoft.Robotics.Simulation.Physics.MaterialProperties)">
            <summary>
            Initialization constructor
            </summary>
            <param name="name">Entity name</param>
            <param name="textureResource">Texture file to overlay over the height field</param>
            <param name="groundMaterial">Material properties for ground</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.HeightFieldEntity.#ctor(Microsoft.Robotics.Simulation.Physics.HeightFieldShapeProperties,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="shapeDesc"></param>
            <param name="textureResource"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.HeightFieldEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.HeightFieldEntity.Update(Microsoft.Robotics.Simulation.Engine.FrameUpdate)">
            <summary>
            Frame update. Disable frame updates since nothing needs to be done
            </summary>
            <param name="update"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.HeightFieldEntity.HeightFieldShape">
            <summary>
            Height field shape
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.TerrainEntity">
            <summary>
            Basic terrain entity, read from file height data and builds a matrix of
            ageia heightfields, a rendering mesh is created for each chunk
            rendering uses frustum culling to reduce chunks to be rendered
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.TerrainEntity.ChunkSize">
            <summary>
            side of each terrain chunk
            actually the side is 257 points,
            but one is shared between adiacent patches
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.TerrainEntity.GeosphereLength">
            <summary>
            earth circumference in meters
            mean earth radius from Geodetic Reference System 1980 (GRS80)
            most of GIS express grid resolution as fraction of this; commonly found are
              1 arc second = 30.8 m
            1/3 arc second = 10.2 m
            1/9 arc second =  3.4 m
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.TerrainEntity._defaultTerrainHeightFileName">
            <summary>
            Default filenames for terrain ctor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.TerrainEntity.FillDataFromFileBMP(System.String)">
            <summary>
            open simple bmp file with heights
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.TerrainEntity.FillDataFromFileFLT(System.String)">
            <summary>
            open file couple .hdr(header) .flt(raw data),
            initialize the heightmap structure
            read and copy data from file to heightfield.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.TerrainEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.TerrainEntity.#ctor(System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="fileName"></param>
            <param name="textureResource"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.TerrainEntity.#ctor(System.String,System.String,Microsoft.Robotics.Simulation.Physics.MaterialProperties)">
            <summary>
            Initialization constructor
            </summary>
            <param name="fileName"></param>
            <param name="textureResource"></param>
            <param name="groundMaterial"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.TerrainEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.TerrainEntity.Update(Microsoft.Robotics.Simulation.Engine.FrameUpdate)">
            <summary>
            Frame update. Disables update, nothing to do
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.TerrainEntity.Render(Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode,Microsoft.Robotics.Simulation.Engine.MatrixTransforms,Microsoft.Robotics.Simulation.Engine.CameraEntity)">
            <summary>
            Frame render
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.TerrainEntity.TerrainFileName">
            <summary>
            terrain data filename
            can be a bitmap XXXX.bmp (use the extension)
            or a couple hdr+flt YYYYY (do not use extension)
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.TerrainEntityLOD">
            <summary>
            LOD rendering terrain entity, read from file height data and builds a matrix of
            ageia heightfields, a rendering mesh is created for each chunk
            rendering uses frustum culling to reduce chunks to be rendered
            chunks are rendered with different level of detail, detail is selected and updated
            depending on the camera position
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.TerrainEntityLOD.ChunkSize">
            <summary>
            Side of each terrain chunk
            actually the side is 33 points,
            but one is shared between adiacent patches
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.TerrainEntityLOD.GeosphereLength">
            <summary>
            earth circumference in meters
            mean earth radius from Geodetic Reference System 1980 (GRS80)
            most of GIS express grid resolution as fraction of this; commonly found are
              1 arc second = 30.8 m
            1/3 arc second = 10.2 m
            1/9 arc second =  3.4 m
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.TerrainEntityLOD.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.TerrainEntityLOD.#ctor(System.String,System.String,Microsoft.Robotics.Simulation.Physics.MaterialProperties)">
            <summary>
            Initialization constructor
            </summary>
            <param name="fileName"></param>
            <param name="textureResource"></param>
            <param name="groundMaterial"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.TerrainEntityLOD.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.TerrainEntityLOD.Update(Microsoft.Robotics.Simulation.Engine.FrameUpdate)">
            <summary>
            Frame update
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.TerrainEntityLOD.Render(Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode,Microsoft.Robotics.Simulation.Engine.MatrixTransforms,Microsoft.Robotics.Simulation.Engine.CameraEntity)">
            <summary>
            Frame render
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.LightSourceEntityType">
            <summary>
            Types of light sources
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.LightSourceEntityType.None">
            <summary>
            Unimplimented
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.LightSourceEntityType.Directional">
            <summary>
            Directional
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.LightSourceEntityType.Omni">
            <summary>
            Omni directional
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.LightSourceEntityType.Spot">
            <summary>
            Spot light
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.LightSourceEntity">
            <summary>
            Illuminates the scene
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.LightSourceEntity.LIGHT_PROPERTY_CATEGORY">
            <summary>
            This is just the name for the property grid category that light specific properties go under
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.LightSourceEntity.DEF_LIGHT_DIR">
            <summary>
            With no orientation, a light will point down by default.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.LightSourceEntity.#ctor">
            <summary>
            Default constructor, uses point light type
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.LightSourceEntity.#ctor(Microsoft.Robotics.Simulation.Engine.LightSourceEntityType)">
            <summary>
            Initialization constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.LightSourceEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initializes light
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.LightSourceEntity.LoadResources(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            A LightSourceEntity can not have a custom mesh since it is overriden anyways
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.LightSourceEntity.Render(Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode,Microsoft.Robotics.Simulation.Engine.MatrixTransforms,Microsoft.Robotics.Simulation.Engine.CameraEntity)">
            <summary>
            Overload so that lights are always drawn in edit mode
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.LightSourceEntity.Dispose">
             <summary>
            
             </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.LightSourceEntity.Type">
            <summary>
            Get or set the light type
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.LightSourceEntity.Direction">
            <summary>
            Get or set the direction that the light is pointing
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.LightSourceEntity.Color">
            <summary>
            Gets the normalized color of the light
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.LightSourceEntity.SpotUmbra">
            <summary>
            Angle of cone created by a spotlight
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.LightSourceEntity.FalloffStart">
            <summary>
            Starting falloff for a point or spot light
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.LightSourceEntity.FalloffEnd">
            <summary>
            Ending falloff for a point or spot light
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.LightSourceEntity.CastsShadows">
            <summary>
            Gets or sets whether the light creates shadows
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.LightSourceEntity.LightPosition">
            <summary>
             Get the position of the light in world space to send to an effect
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.GlobalJointEntity">
            <summary>
            Entity that holds a list of joints used in a Collada scene.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.GlobalJointEntity.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.GlobalJointEntity.AddJoint(Microsoft.Robotics.PhysicalModel.Joint)">
            <summary>
            Adds a joint to the global joint entity
            </summary>
            <param name="joint"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.GlobalJointEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initializes the joints and inserts them into the physics engine.
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.GlobalJointEntity.Dispose">
            <summary>
            Delete joints upon disposal
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.GlobalJointEntity.Update(Microsoft.Robotics.Simulation.Engine.FrameUpdate)">
            <summary>
            Update joint positions, if necessary
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.GlobalJointEntity.Render(Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode,Microsoft.Robotics.Simulation.Engine.MatrixTransforms,Microsoft.Robotics.Simulation.Engine.CameraEntity)">
            <summary>
            This object is not rendered. However, we don't want to set the 'DisableRendering' flag
             because we still want the editor to be able to select this entity
            </summary>
            <param name="renderMode"></param>
            <param name="transforms"></param>
            <param name="currentCamera"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.GlobalJointEntity.UpdateEntityWorldBoundingSphere">
            <summary>
            Workaround design of editor to allow clicking on "container" entities
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.GlobalJointEntity.Joints">
            <summary>
            A global list of joints in the Collada Scene.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.GlobalJointEntity.Summary">
            <summary>
            A textual summary of all the joints
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.GlobalJointEntity.RotationVelocities">
            <summary>
            A list of automatic rotation velocities for each joint
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.GlobalJointEntity.SimulatedTime">
            <summary>
            Amount of time joint has been physically simulated for
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.EntityWithMaterials">
            <summary>
            Entity with material that it uses for its mesh, rather than
            using the material specified by the mesh.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.EntityWithMaterials.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.EntityWithMaterials.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initializes any textures needed from the entity's material list
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.EntityWithMaterials.Materials">
            <summary>
            Get or set the list of materials the entity uses
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.EntityWithMaterials.ConvexShapes">
            <summary>
            Get or set the list of convex mesh shapes in the entity
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.EntityWithMaterials.TriangleShapes">
            <summary>
            Get or set the list of triangle mesh shapes in the entity
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.EntityWithMaterials.SphereShapes">
            <summary>
            Get or set the list of sphere shapes in the entity
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.EntityWithMaterials.BoxShapes">
            <summary>
            Get or set the list of box shapes in the entity
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.EntityWithMaterials.SolverIterationCount">
            <summary>
            Number of solver iterations performed when processing joint/contacts connected to this body.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.EntityWithMaterials.MaxAngularVelocity">
            <summary>
            Maximum allowed angular velocity.
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SpritePivotType">
            <summary>
            Type of Sprite Pivots
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SpritePivotType.Fixed">
            <summary>
            The sprite does not pivot at all
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SpritePivotType.YAxis">
            <summary>
            The sprite turns on its Y axis to face the active camera
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SpritePivotType.Center">
            <summary>
            The sprite pivots around its center to face the active camera
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SpritePositioningType">
            <summary>
            Type of Sprite Positioning
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SpritePositioningType.Local">
            <summary>
            The sprite is defined in local space (default)
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SpritePositioningType.World">
            <summary>
            The sprite is defined in world space (ie, will remain "Fixed" at a location)
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SpriteEntity">
            <summary>
            Base entity for all sprites
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SpriteEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SpriteEntity.#ctor(System.Single,System.Single,System.String,Microsoft.Robotics.Simulation.Engine.SpritePivotType,Microsoft.Robotics.PhysicalModel.Vector3)">
            <summary>
            Initialization constructor with initial bitmap
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="bitmapFile"></param>
            <param name="pivot"></param>
            <param name="initialPos"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SpriteEntity.#ctor(System.Single,System.Single,System.String,Microsoft.Robotics.Simulation.Engine.SpritePivotType,Microsoft.Robotics.PhysicalModel.Vector3,Microsoft.Robotics.Simulation.Engine.SpritePositioningType)">
            <summary>
            Initialization constructor with initial bitmap
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="bitmapFile"></param>
            <param name="pivot"></param>
            <param name="initialPos"></param>
            <param name="positioning"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SpriteEntity.#ctor(System.Single,System.Single,System.Int32,System.Int32,Microsoft.Robotics.Simulation.Engine.SpritePivotType,Microsoft.Robotics.PhysicalModel.Vector3)">
            <summary>
            Initialization constructor with empty bitmap
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="textureWidth"></param>
            <param name="textureHeight"></param>
            <param name="pivot"></param>
            <param name="initialPos"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SpriteEntity.#ctor(System.Single,System.Single,System.Int32,System.Int32,Microsoft.Robotics.Simulation.Engine.SpritePivotType,Microsoft.Robotics.PhysicalModel.Vector3,Microsoft.Robotics.Simulation.Engine.SpritePositioningType)">
            <summary>
            Initialization constructor with empty bitmap
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="textureWidth"></param>
            <param name="textureHeight"></param>
            <param name="pivot"></param>
            <param name="initialPos"></param>
            <param name="positioning"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SpriteEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialization
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SpriteEntity.GetBitmap">
            <summary>
            Returns a bitmap with the proper dimensions and format to draw to the sprite texture
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SpriteEntity.SetBitmap(System.Drawing.Bitmap)">
            <summary>
            Copies the contents of a bitmap to the sprite texture
            </summary>
            <param name="bmp"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SpriteEntity.Update(Microsoft.Robotics.Simulation.Engine.FrameUpdate)">
            <summary>
            Update Method that positions the sprite toward the Camera
            </summary>
            <param name="update"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SpriteEntity.Width">
            <summary>
            Width of the sprite in meters
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SpriteEntity.Height">
            <summary>
            Height of the sprite in meters
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SpriteEntity.TextureWidth">
            <summary>
            Width of the texture in texels
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SpriteEntity.TextureHeight">
            <summary>
            Height of the texture in texels
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SpriteEntity.PivotType">
            <summary>
            The sprite pivot behavior
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SpriteEntity.PositioningType">
            <summary>
            The sprite positioning behavior
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.CameraSprite">
            <summary>
            Camera sprite.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraSprite.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraSprite.#ctor(System.Single,System.Single,Microsoft.Robotics.Simulation.Engine.SpritePivotType,System.Single,Microsoft.Robotics.PhysicalModel.Vector3,Microsoft.Robotics.Simulation.Engine.SpritePositioningType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="pivot"></param>
            <param name="interval"></param>
            <param name="initialPos"></param>
            <param name="positioning"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraSprite.#ctor(System.Single,System.Single,Microsoft.Robotics.Simulation.Engine.SpritePivotType,System.Single,Microsoft.Robotics.PhysicalModel.Vector3)">
            <summary>
            Initialization constructor
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="pivot"></param>
            <param name="interval"></param>
            <param name="initialPos"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraSprite.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialize
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraSprite.Render(Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode,Microsoft.Robotics.Simulation.Engine.MatrixTransforms,Microsoft.Robotics.Simulation.Engine.CameraEntity)">
            <summary>
            
            </summary>
            <param name="renderMode"></param>
            <param name="transforms"></param>
            <param name="currentCamera"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CameraSprite.Update(Microsoft.Robotics.Simulation.Engine.FrameUpdate)">
            <summary>
            Update
            </summary>
            <param name="update"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CameraSprite.CaptureInterval">
            <summary>
            The number of milliseconds to wait between sprite image updates
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.EntityNameSprite">
            <summary>
            Camera sprite.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.EntityNameSprite.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.EntityNameSprite.#ctor(System.Single,System.Single,System.Int32,System.Int32,Microsoft.Robotics.Simulation.Engine.SpritePivotType,Microsoft.Robotics.PhysicalModel.Vector3,System.String,System.Single)">
            <summary>
            Initialization constructor
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="textureWidth"></param>
            <param name="textureHeight"></param>
            <param name="pivot"></param>
            <param name="initialPos"></param>
            <param name="family"></param>
            <param name="fontSize"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.EntityNameSprite.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialize
            </summary>
            <param name="device"></param>
            <param name="physicsEngine"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.EntityNameSprite.FontFamily">
            <summary>
            The font family name of the font to use
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.EntityNameSprite.FontSize">
            <summary>
            The font size of the font to use
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.DisplayEntity">
            <summary>
            Display sprite.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DisplayEntity.#ctor">
            <summary>
            Display entity default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DisplayEntity.#ctor(System.Single,System.Single,System.Int32,System.Int32,System.Single,Microsoft.Robotics.PhysicalModel.Vector3)">
            <summary>
            Display entity constructor
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="horizontalResolution"></param>
            <param name="verticalResolution"></param>
            <param name="refreshRate"></param>
            <param name="initialPos"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DisplayEntity.SetImage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies the contents of a bitmap to the sprite texture
            </summary>
            <param name="rgbData"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.DisplayEntity.RefreshRate">
            <summary>
            Refresh rate of the display in Hz
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.KinectEntity">
            <summary>
            Models a kinect sensor base
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.KinectEntity.kinectDimension">
            <summary>
            Dimension of the kinect base
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.KinectEntity.kinectPosition">
            <summary>
            Position of the kinect base
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.KinectEntity.kinectLocalAxis">
            <summary>
            Joint Local Axis
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.KinectEntity.kinectNormalAxis">
            <summary>
            Joint Normal Axis
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.KinectEntity.kinectBaseConnection">
            <summary>
            Joint Connection Base
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.KinectEntity.kinectCameraConnection">
            <summary>
            Joint Connection Camera
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.KinectEntity.depthCam">
            <summary>
            The depth cam
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.KinectEntity.webcam">
            <summary>
            The web cam
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.KinectEntity.prefix">
            <summary>
            Prepended to the all child entities
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.KinectEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Robotics.Simulation.Engine.KinectEntity"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.KinectEntity.#ctor(Microsoft.Robotics.PhysicalModel.Vector3,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Robotics.Simulation.Engine.KinectEntity"/> class.
            </summary>
            <param name="initialPos">The initial pos.</param>
            <param name="prefix">Prepended to entity name</param>
            <remarks>
            Custom constructor for building model from hard coded values. Used to create entity programmatically
            </remarks>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.KinectEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialize the entity
            </summary>
            <param name="device">The graphics device</param>
            <param name="physicsEngine">The physics engine</param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.KinectEntity.Dimension">
            <summary>
            Gets or sets the Kinect Base Dimension
            </summary>
            <value>
            The dimension.
            </value>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.KinectEntity.DepthCam">
            <summary>
            Gets or sets the DepthCam
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.KinectEntity.WebCam">
            <summary>
            Gets or sets the webcam
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.KinectCameraEntity">
            <summary>
            Models a kinect sensor
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.KinectCameraEntity.kinectDimension">
            <summary>
            Dimension for the Kinect sensor
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.KinectCameraEntity.kinectPosition">
            <summary>
            Position of the kinect sensor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.KinectCameraEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Robotics.Simulation.Engine.KinectCameraEntity"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.KinectCameraEntity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Robotics.Simulation.Engine.KinectCameraEntity"/> class.
            </summary>
            <param name="prefix">Prepended to entity name</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.KinectCameraEntity.Initialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.PhysicsEngine)">
            <summary>
            Initialize the entity
            </summary>
            <param name="device">The graphics device</param>
            <param name="physicsEngine">The physics engine</param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.KinectCameraEntity.Dimension">
            <summary>
            Gets or sets the Kinect Dimension
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.ColladaToMSRS">
            <summary>
            Converter that gets meshes and entities from a collada file
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ColladaToMSRS.GetDefaultMaterial">
            <summary>
            Returns a default extended material.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ColladaToMSRS.#ctor(System.String)">
            <summary>
            Converts collada data to MSRS simulator data
            </summary>
            <param name="colladaFileName">Collada file to use</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ColladaToMSRS.ApplyPhysicsSceneSettings">
            <summary>
            Apply physics scene settings from the collada file to the current MSRS scene
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.ColladaToMSRS.Entities">
            <summary>
            Get the entities that were created from the collada file
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.ColladaToMSRS.ColladaObject">
            <summary>
            Base class for Collada types
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.ColladaToMSRS.ColladaData">
            <summary>
            Declares that a ColladaObject field is Collada data,
            and should be initialized on construction.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.ColladaToMSRS.ColladaGeometry.IsValid">
            <summary>
            This can be false because collada might specify geometry that has no triangles
            Drawing a mesh with no triangles causes an error in xna
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.ColladaToMSRS.ColladaGeometry.IsConvex">
            <summary>
            Returns true if this is a convex mesh.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.ColladaToMSRS.ColladaCamera.IsPerspective">
            <summary>
            Camera is only valid if it is a perspective camera
            We currently don't have support for orthographic cameras
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.ColladaToMSRS.ColladaPhysicsMaterial.Material">
            <summary>
            Note: The returned material *must* be given a name.
            We could assign a unique name here, but in general, we don't
                want to do this for materials so we let the caller handle 
                assigning a unique name to the returned material
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.ColladaToMSRS.ColladaEffect.MN">
            <summary>Shortcut for material node</summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Batching">
            <summary>
            Controls batching for graphics
            Disable if you experience rendering problems
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Batching.ToggleBatching">
            <summary>
            Toggle batching
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Batching.EnableBatching">
            <summary>
            Toggle batching
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Batching.DisableBatching">
            <summary>
            Disable batching
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Batching.Graphics">
            <summary>
            Get handle to batched or non-batched graphics depending on the mode
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.BatchedGraphics">
            <summary>
            Provides batch efficient behavior for users who write code in a non-batch efficient manner
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.TransformUVCoords(Microsoft.Robotics.Simulation.Engine.VisualEntityMesh,Microsoft.Robotics.Simulation.MeshLoader.MeshBatch,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Updates UV coords in the vertex buffer to match the texture atlas we just created
            </summary>
            <param name="mesh"></param>
            <param name="meshBatch"></param>
            <param name="uvTransform"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.SimplifyMesh``1(Microsoft.Robotics.Simulation.Engine.PositionNormalTexturedColored[],``0[],Microsoft.Robotics.Simulation.Engine.PositionNormalTexturedColored[]@,System.Array@)">
            <summary>
            Called internally by VisualEntityMesh - you should not need to call this method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="verts"></param>
            <param name="indicies"></param>
            <param name="vertsOut"></param>
            <param name="indiciesOut"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.ComputeBatchedMesh(Microsoft.Robotics.Simulation.Engine.VisualEntityMesh)">
            <summary>
            Called internally by VisualEntity - you should not need to call this method.
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.MergeMeshes(Microsoft.Robotics.Simulation.Engine.VisualEntity,Microsoft.Robotics.Simulation.Engine.VisualEntityMesh,Microsoft.Robotics.Simulation.Engine.PositionNormalTexturedColored[]@,System.Array@)">
            <summary>
            Merges vertex/index buffer in mesh with vertex/index buffer in outVerts and outIndicies
            </summary>
            <param name="e"></param>
            <param name="mesh"></param>
            <param name="outVerts"></param>
            <param name="outIndicies"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.DuplicateMesh(System.Int32,Microsoft.Robotics.Simulation.Engine.PositionNormalTexturedColored[],System.Array)">
            <summary>
            Duplicates vertex buffer and index buffer so we can use this mesh for shader instancing purposes
            </summary>
            <param name="numMeshesInBatch"></param>
            <param name="origVerts"></param>
            <param name="origIndicies"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.ComputeBatchId``1(``0)">
            <summary>
            Called internally by VisualEntity - you should not need to call the method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.AddToBatch(Microsoft.Robotics.Simulation.Engine.CachedEffect,Microsoft.Xna.Framework.Matrix,Microsoft.Robotics.Simulation.BatchedGraphics.BatchedMesh)">
            <summary>
            Low level batch API. See the LaserRangeFinderEntity in entities.cs for example usage.
            </summary>
            <param name="e"></param>
            <param name="worldMatrix"></param>
            <param name="mesh"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.DrawBatched(Microsoft.Robotics.Simulation.Engine.CachedEffect,Microsoft.Xna.Framework.Matrix[],System.Int32,Microsoft.Robotics.Simulation.BatchedGraphics.BatchedMesh)">
            <summary>
            Low level batch API. See the LaserRangeFinderEntity in entities.cs for example usage.
            </summary>
            <param name="e"></param>
            <param name="worldMatricies"></param>
            <param name="numWorldMatricies"></param>
            <param name="mesh"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.EndBatch(Microsoft.Robotics.Simulation.Engine.CachedEffect,Microsoft.Robotics.Simulation.BatchedGraphics.BatchedMesh)">
            <summary>
            Low level batch API. See the LaserRangeFinderEntity for example usage.
            </summary>
            <param name="e"></param>
            <param name="mesh"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.BeginEffect(Microsoft.Robotics.Simulation.Engine.CachedEffect)">
            <summary>
            Call instead of effect.Begin()
            </summary>
            <param name="cachedEffect"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.EndEffect(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Call instead of effect.End()
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.BeginPass(Microsoft.Xna.Framework.Graphics.EffectPass)">
            <summary>
            Call instead of Pass.Begin()
            </summary>
            <param name="pass"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.EndPass(Microsoft.Xna.Framework.Graphics.EffectPass)">
            <summary>
            Call instead of pass.End()
            </summary>
            <param name="pass"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.Present(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Call instead of _device.Present()
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.SetCurrentTechnique(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
            <summary>
            Call instead of _effect.CurrentTechnique = ...
            </summary>
            <param name="effect"></param>
            <param name="effectTechnique"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.ConditionallyBatch(Microsoft.Robotics.Simulation.Engine.VisualEntityMesh)">
            <summary>
            You should not need to call this function. It is called one place in types.cs
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.UpdateDevice(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Called once a frame by the SimulationEngine.
            You should never need to call this anywhere else.
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            Call instead of _device.SetRenderTarget
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.FlushCommands">
            <summary>
            This is a low level call that you will likely not need to use, but is
            exposed in case you do manual effect / renderstate setting and you notice
            rendering artifacts or things that appear out of date.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.PrepareEffectAndDeviceBeforeRender(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Engine.CachedEffect)">
            <summary>
            Call instead of SimulationEngine.PrepareEffectAndDeviceBeforeRender
            </summary>
            <param name="device"></param>
            <param name="cachedEffect"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.GetRenderTarget(System.Int32)">
            <summary>
            Get the ith render target 
            </summary>
            <param name="ithRenderTarget"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.Clear(Microsoft.Xna.Framework.Color)">
            <summary>
            Clear color/depth/stencil of current render targets
            </summary>
            <param name="color"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.BatchedGraphics.BatchedMesh">
            <summary>
            Simplified version of VisualEntityMesh + RenderableShape + BoSMesh + MeshBatch
                which is ideal for batching
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.BatchedGraphics.BatchedMesh._referenceCount">
            <summary>
            number of VisualEntity's using this BatchedMesh
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.BatchedMesh.#ctor(Microsoft.Robotics.Simulation.Engine.PositionNormalTexturedColoredInstanced[],System.Array)">
            <summary>
            caches data - waits until we have enough references to make the xna buffers
            </summary>
            <param name="newVerts"></param>
            <param name="newIndicies"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.BatchedGraphics.BatchedLODMesh">
            <summary>
            A batched mesh that can be drawn at varying resolutions
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.BatchedGraphics.BatchedLODMesh.Render(Microsoft.Robotics.Simulation.Engine.VisualEntity.RenderMode,Microsoft.Robotics.Simulation.Engine.CachedEffect,Microsoft.Robotics.Simulation.Engine.MatrixTransforms)">
            <summary>
            fast path to render a mesh
            </summary>
            <param name="renderMode"></param>
            <param name="effect"></param>
            <param name="transforms"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.NonBatchedGraphics">
            <summary>
            Compares batch mode performance to non batch mode performance
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SimLogger">
            <summary>
            Logs messages from the content loaders and processors
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SimImporterContext">
            <summary>
            Importer context used by importers to identify directories and dependencies
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SimProcessorContext">
            <summary>
            Processor context used by content processors to specify directories and parameters
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SimulationEngine">
            <summary>
            Simulation Engine content pipeline methods
            </summary>
            <summary>
            Simulation Engine service implementation
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.CompileEffectFromFile(System.String,System.String)">
            <summary>
            Compiles an effect given a filename
            </summary>
            <param name="filename">The filename of the effect file</param>
            <param name="macros">Macros to apply to the effect</param>
            <returns>The effect object</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.CompileEffectFromStream(System.String,System.IO.Stream,System.String)">
            <summary>
            Compiles an effect given a stream
            </summary>
            <param name="filename">The filename of the effect file</param>
            <param name="sourceStream">The stream of the effect file contents</param>
            <param name="macros">Macros to apply to the effect</param>
            <returns>The effect object</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.CompileEffect(Microsoft.Xna.Framework.Content.Pipeline.Graphics.EffectContent,System.String)">
            <summary>
            Compile an effect
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.LoadTexture(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,System.String)">
            <summary>
            Load a texture from a filename
            </summary>
            <param name="device">The graphics device to be associated with the texture</param>
            <param name="fullPath">The file that contains the texture data</param>
            <param name="fileName">The full pathname of the file that contains the texture data</param>
            <returns>A Texture object</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.FixDimensionsIfNecessary(Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent,Microsoft.Xna.Framework.Graphics.GraphicsProfile)">
            <summary>
            If the graphics profile is Reach, ensure that the root image has 
            power-of-two dimensions.
            </summary>
            <param name="content">The texture content to validate</param>
            <param name="graphicsProfile">The graphics profile of the device.</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.IsPowerOfTwo(System.Int32)">
            <summary>
            Determines if the passed value is a power of 2
            </summary>
            <param name="n">The number to test</param>
            <returns>True if the input parameter is a power of 2</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.DrawPrimitivesSegmented(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32)">
            <summary>
            Breaks up a large vertex buffer into smaller chunks that can be rendered by a reach platform device
            </summary>
            <param name="device">The device used to draw</param>
            <param name="type">The type of the graphics primitives. Only TriangleList is supported</param>
            <param name="start">The first vertex in the vertex buffer to be drawn</param>
            <param name="primitiveCount">The total number of primitives to draw</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.DisplayStringOnTitleBar(System.String)">
            <summary>
            Display a string directly on the rendertarget surface when no rendering is taking place
            </summary>
            <param name="text">The text to be displayed.</param>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RasterizerClockwiseWireFrame">
            <summary>
            Rasterizer state for Clockwise culling and wireframe
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RasterizerCounterClockwiseWireFrame">
            <summary>
            Rasterizer state for Counterclockwise culling and wireframe
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RasterizerNoneWireFrame">
            <summary>
            Rasterizer state for no culling and wireframe
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RasterizerClockwiseSolid">
            <summary>
            Rasterizer state for Clockwise culling and solid
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RasterizerCounterClockwiseSolid">
            <summary>
            Rasterizer state for Counterclockwise culling and solid
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RasterizerNoneSolid">
            <summary>
            Rasterizer state for no culling and solid
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.StencilPassDepthStencilState">
            <summary>
            DepthStencil state for shadow stencil pass
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.StencilPassRasterizerState">
            <summary>
            Rasterizer state for shadow stencil pass
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.StencilPassBlendState">
            <summary>
            Blend state for shadow stencil pass
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.ShadowCasterDepthStencilState">
            <summary>
            DepthStencil state for shadow caster pass
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.ShadowCasterRasterizerState">
            <summary>
            Rasterizer state for shadow caster pass
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.ShadowCasterBlendState">
            <summary>
            Blend state for shadow caster pass
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine._useBatchedMeshes">
            <summary>
            For batching meshes which results in texture atlasing.
            Initially disabled, because texture atlasing for the most part forces us to disable mip-mapping.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine._drawDebugGeometry">
            <summary>
            Enables / disables debug rendering
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.ReturnEntity(System.String)">
            <summary>
            Returns a reference to the named entity if it exists in the environment, null otherwise
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RefreshEntity(Microsoft.Robotics.Simulation.Engine.VisualEntity)">
            <summary>
            This method is called when we want to refresh an entity by serializing it and
            then deserializing it.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.InitializeRuntimeState(Microsoft.Robotics.Simulation.SimulatorUI)">
            <summary>
            This method is called each time we replace the simulation engine state.  It allocates and
            initializes any associated run-time state.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.Initialize(System.Windows.Forms.Control,Microsoft.Robotics.Simulation.SimulatorUI)">
            <summary>
            This method is called once when the simulator is first initialized.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.Application_Idle(System.Object,System.EventArgs)">
            <summary>
            Idle event handler.  When the Windows event queue is empty, this handler
            runs and updates the render window.  It continues to run until the
            event queue is no longer empty.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.DeviceResetHandler(System.Object,System.EventArgs)">
            <summary>
            This event will be fired immediately after the Direct3D device has been
            reset, which will happen after a lost device scenario. This is the best location to
            create Pool.Default resources since these resources need to be reloaded whenever
            the device is lost. Resources created here should be released in the OnLostDevice
            event.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.Update(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Double,System.Double,System.Double)">
            <summary>
            This callback function will be called once at the beginning of every frame. This is the
            best location for your application to handle updates to the scene, but is not
            intended to contain actual rendering calls, which should instead be placed in the
            OnFrameRender callback.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.AddToScene(Microsoft.Robotics.Simulation.Engine.VisualEntity)">
            <summary>
            Determines if a visual entity should be included in the current scene
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.AddToScene(Microsoft.Robotics.Simulation.Engine.VisualEntity,System.Collections.Generic.List{System.Collections.Generic.SortedDictionary{System.Double,Microsoft.Robotics.Simulation.Engine.VisualEntity}},System.Collections.Generic.SortedDictionary{System.Double,Microsoft.Robotics.Simulation.Engine.VisualEntity})">
            <summary>
            Determines if a visual entity should be included in the current scene
            </summary>
            <param name="e"></param>
            <param name="renderSolidCue"></param>
            <param name="renderTransparentCue"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.AddToScene(Microsoft.Robotics.Simulation.Engine.VisualEntity,System.Collections.Generic.List{System.Collections.Generic.SortedDictionary{System.Double,Microsoft.Robotics.Simulation.Engine.VisualEntity}},System.Collections.Generic.SortedDictionary{System.Double,Microsoft.Robotics.Simulation.Engine.VisualEntity},System.Boolean)">
            <summary>
            Determines if a visual entity should be included in the current scene
            </summary>
            <param name="e"></param>
            <param name="renderSolidCue"></param>
            <param name="renderTransparentCue"></param>
            <param name="useCulling"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.WaitForEntities(Microsoft.Robotics.Simulation.Engine.FrameUpdateResultPort,System.Int32)">
            <summary>
            Waits on an event until it receives a bool message from each entity in our table
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.ClampFrustumToFrustum(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Modifys one frustum so it tightly fits around another one
            </summary>
            <param name="eyeViewProj"></param>
            <param name="lightViewProjMatrix"></param>
            <returns>false if we were enable to clamp one frustum to the other, true otherwise</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RenderScene(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Double,Microsoft.Robotics.Simulation.Engine.CameraEntity)">
            <summary>
            Single instance used for starting render on entities
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RenderFloorplan(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Double,Microsoft.Robotics.Simulation.Engine.CameraEntity)">
            <summary>
            Render the scene from above in an orthographic view
            </summary>
            <param name="device"></param>
            <param name="appTime"></param>
            <param name="currentCamera"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.IntersectRayWithoutTypes(Microsoft.Xna.Framework.Ray,Microsoft.Robotics.Simulation.Engine.SimulationEngine.IntersectInvisFlags,System.Type[])">
            <summary>
            Gets a list of triangle intersection records by intersecting the 
            given ray with entities in the scene
            </summary>
            <param name="r">World space ray to intersect with entities</param>
            <param name="invisFlags">Flag to control whether or not to pick entities with disabled rendering</param>
            <param name="typesExcluded">Array of types that should not be tested with the ray</param>
            <returns>List of triangle intersection records</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.IntersectRay(Microsoft.Xna.Framework.Ray,Microsoft.Robotics.Simulation.Engine.SimulationEngine.IntersectInvisFlags)">
            <summary>
            Gets a list of triangle intersection records by intersecting the 
            given ray with entities in the scene
            </summary>
            <param name="r">World space ray to intersect with entities</param>
            <param name="invisFlags">Flag to control whether or not to pick entities with disabled rendering</param>
            <returns>List of triangle intersection records</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.IsEntityNameInUse(System.String)">
            <summary>
            Returns true if the specified name is already being used.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RequestShaderReload">
            <summary>
            Requests the simulation engine to reset all the shaders
            The shaders are not actually reset until the next update
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.#ctor(Microsoft.Dss.ServiceModel.Dssp.DsspServiceCreationPort)">
            <summary>
            Create constructor
            </summary>
            <param name="creationPort"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.Start">
            <summary>
            Service start
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.LoadSimulationState(System.String,System.Collections.Generic.List{Microsoft.Robotics.Simulation.Entity})">
            <summary>
            create entities and simulator state from an XML serialization
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.SaveSimulationStateSynchronous(System.String,System.Collections.Generic.List{Microsoft.Robotics.Simulation.Entity})">
            <summary>
            A synchronous version of SaveSimulationState
            </summary>
            <param name="fileName"></param>
            <param name="entityList"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.SaveSimulationState(System.String,System.Collections.Generic.List{Microsoft.Robotics.Simulation.Entity})">
            <summary>
            Create an XML serialization of all entities
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.CheckServiceMessages(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Manually check for pending messages on our engine control port. This way
            we guarantee all message processing happens once per frame and in the context of
            the rendering thread. This avoid locking of our data structs. The routine is called
            in the context of the render loop
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.DeserializeVisualEntitiesSynchronous(System.Collections.Generic.List{System.Object})">
            <summary>
            Synchronous version of DeserializeVisualEntities
            </summary>
            <param name="xmlNodes"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.DeserializeVisualEntities(Microsoft.Ccr.Core.Port{System.Collections.Generic.List{Microsoft.Robotics.Simulation.Entity}},System.Collections.Generic.List{System.Object},System.Collections.Generic.List{Microsoft.Robotics.Simulation.Entity})">
            <summary>
            Post process the state instance we got from the service infra. The infra will
            only populate Entities list with XmlNode structures that we need to deserialize to
            the proper entity instances
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.DeserializeListSynchronous(System.Collections.ICollection,Microsoft.Ccr.Core.Port{System.Collections.Generic.List{System.Object}})">
            <summary>
            Given a collection of XmlNode instances, deserialize into C# objects, preserve the order
            </summary>
            <param name="xmlNodeList"></param>
            <param name="done"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.SerializeVisualEntityListSynchronous(System.Collections.ICollection)">
            <summary>
            Synchronous version of SerializeVisualEntityList
            </summary>
            <param name="visualEntityList"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.SerializeVisualEntityList(System.Collections.ICollection,Microsoft.Ccr.Core.Port{System.Collections.Generic.List{System.Object}})">
            <summary>
            Given a list of Visual Entities, recursively serialize them and
            their children into XmlNode objects
            </summary>
            <param name="visualEntityList"></param>
            <param name="done"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.GlobalInstance">
            <summary>
            Global reference to the simulation engine
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.GlobalInstancePort">
            <summary>
            Simulation engine main PortSet
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.ResourceCache">
            <summary>
            Simulation resource cache
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.SkyEntity">
            <summary>
            Get the current sky entity in the scene
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.Device">
            <summary>
            This is the graphics device that the simulation environment uses to render the scene.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.ShadowVolumeEffect">
            <summary>
            Gets the effect that extrudes shadow volumes.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.LightTypes">
            <summary>
            Get an array containing the type of the lights currently stored
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.ActiveLightEntitiesCount">
            <summary>
            Get the number of active light entities in the scene
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.ShadowCasterIndex">
            <summary>
            Gets the index of the current active light entity that casts shadows
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.FrameCount">
            <summary>
            Gets the index of the current frame. Might wrap / around and become negative.
            Useful for temporarl coherency
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.SimulatorMode">
            <summary>
            Get the current mode that the simulator is in
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.CurrentFrameUpdate">
            <summary>
            Gets the most recent frame update
            Useful for temporal coherence related optimization techiniques
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.AdvancedRuntimeState">
            <summary>
            Advanced sim properties
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.DebugRenderScale">
            <summary>
            The scaling used for vectors in the physics visualization
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.DebugRenderEnables">
            <summary>
            Enables for various features in the physics visualization
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RuntimeState">
            <summary>
            Advanced sim properties
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RuntimeState.RequestActivationChange(System.Boolean)">
            <summary>
            Completely Activate / Deactivate simulator from running
            </summary>
            <param name="activate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RuntimeState.UpdatePhysicsTimeInterval(System.Single)">
            <summary>
            Gets / sets time interval for physics
            0 (the default) means use the real time elapsed
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RuntimeState.QueuePostRenderEventDeferred(System.Int32,Microsoft.Ccr.Core.ITask)">
            <summary>
            Internal use
            </summary>
            <param name="frameDelay"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RuntimeState.QueuePreRenderEventDeferred(System.Int32,Microsoft.Ccr.Core.ITask)">
            <summary>
            Internal use
            </summary>
            <param name="frameDelay"></param>
            <param name="callback"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RuntimeState.DefaultCamera">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RuntimeState.EnableUpdates">
            <summary>
            Internal use.
            Disable both physics and entity updates completely.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RuntimeState.DisableEntityUpdates">
            <summary>
            Internal use.
            Disable both physics and entity updates completely.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RuntimeState.StrippingEnabled">
            <summary>
            Enables or disables stripping for all meshes
            Set this to false if you notice incorrect rendering
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.SimulationEngine.RuntimeState.UseConstantElapsedTime">
            <summary>
            Tells ElapsedTime not to get its time from QueryPerformanceCounter
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SimulationEngine.SimModeType">
            <summary>
            Types of modes that the simulator can be in
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.SimModeType.Run">
            <summary>
            Simulator is running a simulation
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.SimModeType.Edit">
            <summary>
            Simulator is enabling user to edit the scene
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SimulationEngine.GraphicsQuality">
            <summary>
            Quality settings for the simulator graphics
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.GraphicsQuality.High">
            <summary>High quality (HiDef)</summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.GraphicsQuality.Low">
            <summary>Low quality (Reach)</summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.GraphicsQuality.Unknown">
            <summary>Quality not yet set</summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SimulationEngine.IntersectInvisFlags">
            <summary>
            Flags for intersecting rays with entities whose rendering is disabled
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.IntersectInvisFlags.SkipDisabledRendering">
            <summary>
            Skip picking of entities whose rendering is disabled
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.IntersectInvisFlags.DontSkipDisabledRendering">
            <summary>
            Pick entities even if their rendering is disabled
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SimulationEngine.SimulatorEditorSettings">
            <summary>
            Simulation engine configuration
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.SimulatorEditorSettings.Exposure">
            <summary>
            Controls the exposure of the main camera
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.SimulatorEditorSettings.RotationScale">
            <summary>
            Controls the speed of the mouse
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.SimulatorEditorSettings.TranslationScale">
            <summary>
            Controls the speed of the keyboard movements
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.SimulatorEditorSettings.GraphicsQuality">
            <summary>
            Controls the quality (and performance) of the simulator graphics
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulationEngine.SimulatorEditorSettings.WaitForVSync">
            <summary>
            Whether or not vsync is on
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEngine.SimulatorEditorSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.DebugRendering.DrawBox(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4)">
            <summary>
            
            </summary>
            <param name="frustumPoints">points to draw in world space</param>
            <param name="color"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.DebugRendering.DrawGeometry(Microsoft.Robotics.Simulation.Engine.CachedEffect,Microsoft.Robotics.Simulation.Engine.MatrixTransforms)">
            <summary>
            Call once per frame right before Present()
            </summary>
            <param name="effect"></param>
            <param name="matrixTransforms"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SimulatorConfiguration">
            <summary>
            Simulation engine configuration
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulatorConfiguration.SettingsFile">
            <summary>
            The filename of the settings file
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulatorConfiguration.EmbeddedResourceLoadTimeoutMS">
            <summary>
            Maximum time in ms to wait for an embedded resource to load
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulatorConfiguration.Headless">
            <summary>
            If true, causes the simulator to run without visible UI
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.SimulatorConfiguration.MainWindowRectangle">
            <summary>
            The position and size of the main window
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulatorConfiguration.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulatorConfiguration.#ctor(System.Boolean)">
            <summary>
            Data Constructor
            </summary>
            <param name="setDefault"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.PlaybackInstance">
            <summary>
            Playback data
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.PlaybackInstance.EntityPoseSize">
            <summary>
            The number of floats in a single entity pose entry
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.PlaybackInstance.SamePoseEpsilon">
            <summary>
            The minimum difference between vector or quaternion data that 
            differentiates a pose.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.PlaybackInstance.PlaybackEnd">
            <summary>
            The latest time covered by the data
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.PlaybackInstance.Poses">
            <summary>
            The playback instance data
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.PlaybackInstance.InitialState">
            <summary>
            The simulator state when recording starts
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.PlaybackInstance.Entities">
            <summary>
            Dictionary of all entities in the environment.  Not serialized.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.PlaybackInstance.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.PlaybackInstance.AddEntityPose(System.Single,Microsoft.Robotics.Simulation.Engine.VisualEntity)">
            <summary>
            Adds the current pose for an entity to the playback data
            </summary>
            <param name="time"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.PlaybackInstance.SamePose(Microsoft.Robotics.PhysicalModel.Pose,Microsoft.Robotics.PhysicalModel.Pose)">
            <summary>
            Determine if two poses are the same
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.IndexBufferOffset">
            <summary>
            A helper class for remapping triangle starts / counts when converting 
            indexed lists to indexed strips
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.MeshProcessor">
            <summary>
            Contains a variety of routines related to mesh simplification, optimizations,
            and ways to modify mesh data to result in faster rendering
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshProcessor.StripifyMesh(System.UInt32[],System.UInt32[]@,System.Int32,System.Collections.Generic.List{Microsoft.Robotics.Simulation.IndexBufferOffset},System.Collections.Generic.List{Microsoft.Robotics.Simulation.IndexBufferOffset}@)">
            <summary>
            Converts input mesh of Indexed Triangle Lists to output mesh of Indexed Triangle Strips
            </summary>
            <param name="originalIndices">assumes # of triangles = # of indicies / 3</param>
            <param name="originalOutIndices">returned buffer in strip format</param>
            <param name="vertexCount">number of verticies</param>
            <param name="originalStrippingConstraints">once we pick one triangle in the constraints, we must only pick other triangles in this constraint</param>
            <param name="triangleStartsAndCounts">updated triangle start index and triangle counts of the subsets</param>
            <returns>true if mesh successfully stripified, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshProcessor.ReorderVertexBuffer``1(``0[],System.Int32[])">
            <summary>
            Reorders vertex buffer such that we step through it in a more linear fashio
            </summary>
            <typeparam name="T"></typeparam>
            <param name="verts"></param>
            <param name="indicies"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshProcessor.ReorderVertexBuffer``1(``0[]@,System.Array@)">
            <summary>
            Reorders vertex buffer such that we step through it in a more linear fashio
            </summary>
            <typeparam name="T"></typeparam>
            <param name="verts"></param>
            <param name="indicies"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshProcessor.ComputeMinimalVertexData(System.Type,Microsoft.Robotics.Simulation.Engine.PositionNormalTexturedColoredInstanced[])">
            <summary>
            only packs the data we actually need into the float array
            </summary>
            <param name="vertexDeclarationType"></param>
            <param name="vertices"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshProcessor.ComputeMinimalVertexData``1(System.Type,``0[])">
            <summary>
            Only currently works with T = PositionNormalTexturedColored or PositionNormalTexturedColoredInstanced
            </summary>
            <typeparam name="T"></typeparam>
            <param name="vertexDeclarationType"></param>
            <param name="vertices"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshProcessor.Face.AddAdjacentFace(Microsoft.Robotics.Simulation.MeshProcessor.Face)">
            <summary>
            returns StripifyError.Failed if we detect a problem with the mesh
            </summary>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.ExternalFrameStatistics">
            <summary>
            FrameStatistics class for serialization
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.ExternalFrameStatistics.TimeStarted">
            <summary>
            Time in system ticks this frame started
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.ExternalFrameStatistics.TimeEnded">
            <summary>
            Time in system ticks this frame ended
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.ExternalFrameStatistics.FrameId">
            <summary>
            Frame Id for this set of statistics
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.ExternalFrameStatistics.ExternalCodeSections">
            <summary>
            Code sections for serialization
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ExternalFrameStatistics.#ctor">
            <summary>
            Required ctor for serialization
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.ExternalFrameStatistics.ExternalCodeSection">
            <summary>
            CodeSection class for serialization
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.ExternalFrameStatistics.ExternalCodeSection.TimeStarted">
            <summary>
            Time on [0,1] range this code section started
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.ExternalFrameStatistics.ExternalCodeSection.TimeEnded">
            <summary>
            Time on [0,1] range this code section ended
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.ExternalFrameStatistics.ExternalCodeSection.Description">
            <summary>
            Code section description
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.ExternalFrameStatistics.ExternalCodeSection.SectionType">
            <summary>
            Code section section type
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.ExternalFrameStatistics.ExternalCodeSection.ParentIndex">
            <summary>
            Index of our parent code section
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.ExternalFrameStatistics.ExternalCodeSection.PerformanceCounters">
            <summary>
            All the various counter values we track per frame and code section 
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Profiler._defaultFramesToLog">
            <summary>
            Number of frames we store in memory at one time
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.GetFrameStatistics(System.Int32)">
            <summary>
            ***For UI use***.
            Gets frame statististics for a certain frame from Profiler 
            </summary>
            <param name="frameIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.SerializeData(System.String)">
            <summary>
            Serializes *all* the frame statistics
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.SerializeData(System.String,System.Int32)">
            <summary>
            Serializes a single frame statistic
            </summary>
            <param name="filename"></param>
            <param name="frameStatisticsId"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.DeserializeData(System.String,System.Int32)">
            <summary>
            Will not throw exceptions
            </summary>
            <param name="filename"></param>
            <param name="frameStatisticsId"></param>
            <returns>Success if we successfully deserialized data, Failure otherwise</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.Init(System.Int32)">
            <summary>
            Initializes the profiler with a fixed number of frames to log
            </summary>
            <param name="framesToLog"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.ProfileProfiler">
            <summary>
            Computes the time required to Push / Pop a section
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.BeginFrame">
            <summary>
            Call when you want to start gathering events for the current frame
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.EndFrame">
            <summary>
            Call when you want to stop gathering events for the current frame.
            Often called right before BeginFrame(), but can be called elsewhere as well.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.PushSection(System.String,Microsoft.Robotics.Simulation.Profiler.SectionType)">
            <summary>
            Needs to explicitly call PopSection afterwards.
            Supports nesting.
            </summary>
            <param name="description"></param>
            <param name="sectionType"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.PushAutoPopSection(System.String,Microsoft.Robotics.Simulation.Profiler.SectionType)">
            <summary>
            usage: 
            using(AutoPop autoPop = Profiler.PushAutoPopSection(description, desctionType))
            { 
                /* code */ 
            }
            </summary>
            <param name="description"></param>
            <param name="sectionType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.MapStringToInt(System.String)">
            <summary>
            Given a string, computes a guaranteed unique integer id
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.PopSection">
            <summary>
            Call if using PushSection() - no need to call if using PushAutoPopSection()
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.GetCurrentFrameStatistics">
            <summary>
            Returns the current statistics that have been *fully* populated.
            Expect this to be one frame behind.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.PopSection(System.Single)">
            <summary>
            In general, you will *never* need to call this function.
            For interoprability with Ageia code.
            </summary>
            <param name="physicsTime"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Profiler.Statistics">
            <summary>
            These are the performance counters we track
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Profiler.Statistics._averageTrianglesPerBatch">
            <summary>
            _averageTrianglesPerBatch = _trianglesSentToGPU / _drawIndexedPrimitiveCalls
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Profiler.FrameStatistics">
            <summary>
            Helper class for tracking profiler events, counters, etc on a per-frame basis
            Internal because the UI needs access - only intended to be used by UI
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Profiler.FrameStatistics._statistics">
            <summary>
            Statistics for the entire frame
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Profiler.FrameStatistics._activeCodeSections">
            <summary>
            All the code sections currently pushed
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.PushCodeSection(System.String,Microsoft.Robotics.Simulation.Profiler.SectionType,System.Int32)">
            <summary>
            Adds a code section to what we are currently profiling
            </summary>
            <param name="description"></param>
            <param name="sectionType"></param>
            <param name="threadId"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.PopCodeSection">
            <summary>
            Pops an active code section
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.PopCodeSection(System.Single)">
            <summary>
            In general, you will *never* need to call this function.
            For interoprability with Ageia code.
            </summary>
            <param name="physicsTime"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.BeginFrame(System.UInt32)">
            <summary>
            Call this function once a frame, likely right after EndFrame()
            </summary>
            <param name="frameId"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.EndFrame">
            <summary>
            Call this function once a frame, likely right before BeginFrame()
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.ModifyStatistics(Microsoft.Robotics.Simulation.Profiler.Statistics.CounterType,System.Int32)">
            <summary>
            Modifies one of our perf counters by some integer value
            </summary>
            <param name="counterType"></param>
            <param name="integerChange"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.BuildMostExpensiveEventsList(System.Int32)">
            <summary>
            Returns the most expensive things that we do each frame, making perf analysis simple
            </summary>
            <param name="numCounters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.BuildMostExpensiveEventsList">
            <summary>
            Returns the all the events that happen each frame, sorted most expensive first
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.PercentInProfileEvent(System.Int32)">
            <summary>
            Returns the total percent in all sections called from the same location
            during the frame
            </summary>
            <param name="profileEventId"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.CodeSection">
            <summary>
            Internal because the UI needs access - only intended to be used by UI
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.CodeSection._statistics">
            <summary>
            Statistics local to this code section
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.CodeSection._parent">
            <summary>
            reference to code section one higher level up, or null if at the top-level
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.CodeSection._children">
            <summary>
            reference to code section one lower level down, or null if at the top-level
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.CodeSection._parentFrame">
            <summary>
            reference to the parent that we belong to
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.CodeSection.GetNormalizedStartTime(System.Int64,System.Int64)">
            <summary>
            Normalized means return value is on the range [0,1] within the time range
            </summary>
            <param name="frameStarted"></param>
            <param name="frameEnded"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.CodeSection.GetNormalizedEndTime(System.Int64,System.Int64)">
            <summary>
            Normalized means return value is on the range [0,1] within the time range
            </summary>
            <param name="frameStarted"></param>
            <param name="frameEnded"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.CodeSection.ParentNotSameType">
            <summary>
            true if we are a different type than our parent or if our parent is null
            false otherwise
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Profiler.FrameStatistics.CodeSection.FinishAnalysis(System.Single)">
            <summary>
            Do not call. For analysis of Ageia
            </summary>
            <param name="physicsTime"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Resources.AboutFormatString">
            <summary>
              Looks up a localized string similar to {8}\rtf1\ansi\ansicpg1252\deff0\deflang1033\deflangfe1033{8}\fonttbl{8}\f0\fswiss\fprq2\fcharset0 Arial;{9}{9} {8}\*\generator Msftedit 5.41.21.2507;{9}\viewkind4\uc1\pard\qc\b\f0\fs24 {2} \par \b0\par \fs20 {1} ({3})\par \&apos;a9 {0} Microsoft Corporation\par All rights reserved\par \par Portions hereof \&apos;a9 {0} by NVIDIA Corporation.\par All rights reserved.\par \par Product ID:  {6}\par \pard\b\par \par \par \lang1036 GPU Information\par \b0 {4}\par {5}\par \lang1033 Supported Graphics Profiles: {7}\par \fs1 [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.AboutDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.AboutDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.AboutDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.CameraForm">
            <summary>
            A form to show a camera image
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.CameraForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.CameraForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.CameraForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.CameraForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.ContractDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ContractDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ContractDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.GraphicsSettings.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.GraphicsSettings.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.GraphicsSettings.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.HelpDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.HelpDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.HelpDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.MaterialEditor">
            <summary>
            Dialog for editing material properties of a mesh.
            Ambient, diffuse, specular, and shininess properties can be edited.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.MaterialEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MaterialEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MaterialEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.NewEntityDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.NewEntityDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.NewEntityDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.PhysicsSettings.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.PhysicsSettings.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.PhysicsSettings.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.UpdateGraphs">
            <summary>
            Called by outside code to refresh the profiler display
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.GetRoundedRectanglePath(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Makes a rounded rectangle because C# has no default way to draw a rounded rectangle
            </summary>
            <param name="rect"></param>
            <param name="cornerRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.PaintGraphs(System.Drawing.Graphics)">
            <summary>
            Repaints graphs in the appropriate format (based on the mode)
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.PaintSingleFrameModeGraphs(System.Drawing.Graphics)">
            <summary>
            calls PaintSingleFrameModeGraphs(Graphics g, int graphWidth, int graphHeight)
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.PaintSingleFrameModeGraphs(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            calls PaintSingleFrameModeGraphs(Graphics g, int graphXStart, int graphYStart, int graphWidth, int graphHeight)
            </summary>
            <param name="g"></param>
            <param name="graphWidth"></param>
            <param name="graphHeight"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.PaintSingleFrameModeGraphs(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the graphs in single frame mode
            </summary>
            <param name="g"></param>
            <param name="graphXStart"></param>
            <param name="graphYStart"></param>
            <param name="graphWidth"></param>
            <param name="graphHeight"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.DrawTimescale(System.Drawing.Graphics,System.Int32,System.Int32,System.Single,Microsoft.Robotics.Simulation.Profiler.FrameStatistics)">
            <summary>
            Draws a little timeline with numbers on it
            </summary>
            <param name="g"></param>
            <param name="graphWidth"></param>
            <param name="graphHeight"></param>
            <param name="verticalScale"></param>
            <param name="frameStatistics"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.DrawTimescaleRecursive(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,Microsoft.Robotics.Simulation.Profiler.FrameStatistics)">
            <summary>
            Recursive function to draw timeline. Should only be called by the non-recursive DrawTimescale()
            </summary>
            <param name="g"></param>
            <param name="xStart"></param>
            <param name="xEnd"></param>
            <param name="yValue"></param>
            <param name="lineWidth"></param>
            <param name="verticalScale"></param>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
            <param name="frameStatistics"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.DetectSingleFrameViewMouseClicks">
            <summary>
            Determines if the user clicked a code section in the single-frame view.
            If code section was clicked, the section will be highlighted and tables updated.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.MouseIsOver(System.Drawing.RectangleF)">
            <summary>
            In a method so we can support clicking controls when zoomed in and out
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.PaintMultiFrameModeGraphs(System.Drawing.Graphics)">
            <summary>
            Paints the graphs in multiframe mode.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.DrawGraphVertical(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Robotics.Simulation.Profiler.FrameStatistics,System.Boolean)">
            <summary>
            Draws a single graph of a frame in the vertical multi-frame mode layout
            </summary>
            <param name="g"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="maxWidth"></param>
            <param name="maxHeight"></param>
            <param name="frameStatistics"></param>
            <param name="drawHighlight"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.DrawInnerVerticalGraph(System.Drawing.Graphics,Microsoft.Robotics.Simulation.ProfilerUI.ColorIndicies,System.Drawing.RectangleF)">
            <summary>
            Draws a solid rectangle with a black outline and makes sure the rectangle is not
            so large an exception would get thrown
            </summary>
            <param name="g"></param>
            <param name="colorIndex"></param>
            <param name="innerGraphRectangle"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.ProfilerUI_MouseHover(System.Object,System.EventArgs)">
            <summary>
            Display some tool tip when hovered over an event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.UpdateCounterTable">
            <summary>
            called at runtime to update perf counters in the table
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI._displayModeCombo_TextChanged(System.Object,System.EventArgs)">
            <summary>
            prevents user from entering arbitrary text into the combo box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.UpdateTables">
            <summary>
            Updates tree view and perf counter table
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.ProfilerUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.ProfilerUI.PerfPropertyGridHelper">
            <summary>
            Helper class for populating the property grid
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.ProfilerUI.PerfPropertyGridHelper.PercentInFunctionHelper">
            <summary>
            Helper class for populating the perf counter fields in the property grid
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.ProfilerUIHelp.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUIHelp.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.ProfilerUIHelp.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.SimulatorUI.SaveObjMaterial(Microsoft.Robotics.Simulation.Engine.VisualEntityMesh)">
            <summary>
            Saves a mesh's material to its corresponding file if possible. 
            The mesh must have been created from a file initially.
            </summary>
            <param name="mesh">Mesh to save</param>
            <returns>True if save was successful</returns>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.SimulatorUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.SimulatorUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.SimulatorUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.OpenFileNameEditor">
            <summary>
            UITypeEditor that prompts for a filename.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.OpenFileNameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standard UITypeEditor method.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.OpenFileNameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Standard UITypeEditor method.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.XNAVector3RoundedConverter">
            <summary>
            Special type converter used to display Vector3s to a property grid with 
            rounded components. 
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.GenericObjectEditor">
            <summary>
            UIType Editor for editing a generic object.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.GenericObjectEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Standard UITypeEditor method.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.GenericObjectEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Standard UITypeEditor method.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.PhysicsViewSettings.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.PhysicsViewSettings.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.PhysicsViewSettings.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.Contract">
            <summary>
            Service contract
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Contract.Identifier">
            <summary>
            Contract identifier
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SimulationEnginePort">
            <summary>
            Simulation engine operations port
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEnginePort.Get">
            <summary>
            Get
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEnginePort.Insert(Microsoft.Robotics.Simulation.Engine.VisualEntity)">
            <summary>
            Insert visual entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEnginePort.Delete(Microsoft.Robotics.Simulation.Engine.VisualEntity)">
            <summary>
            Delete visual entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEnginePort.Update(Microsoft.Robotics.Simulation.Engine.VisualEntity)">
            <summary>
            Update visual entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEnginePort.Update(Microsoft.Robotics.Simulation.Engine.CameraView)">
            <summary>
            Update main camera view
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEnginePort.Update(Microsoft.Robotics.Simulation.Engine.SimulatorConfiguration)">
            <summary>
            Update the simulator configuration
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEnginePort.Query(Microsoft.Robotics.Simulation.Engine.VisualEntity)">
            <summary>
            Query for a named simulated entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEnginePort.Query(Microsoft.Robotics.Simulation.Engine.SimulatorConfiguration)">
            <summary>
            Query for the simulator configuration
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEnginePort.Subscribe(System.Collections.Generic.ICollection{Microsoft.Dss.ServiceModel.Dssp.PartnerType},Microsoft.Robotics.Simulation.Engine.SimulationEnginePort)">
            <summary>
            Subscribe for visual entity using partner entry to recover the entity name
            </summary>
            <param name="partnerList">Service partner list that must contain an Entity partner</param>
            <param name="notificationTarget">PortSet to deliver a one time notification when entity is found</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEnginePort.Subscribe(Microsoft.Robotics.Simulation.Engine.EntitySubscribeRequestType,Microsoft.Robotics.Simulation.Engine.SimulationEnginePort)">
            <summary>
            Subscribe for visual entity with specified name
            </summary>
            <param name="subscribeBody">Operation body with a valid entity name</param>
            <param name="notificationTarget">Notification target PortSet</param>
            <returns>Subscription result PortSet</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SimulationEnginePort.Drop">
            <summary>
            Drop service instance
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.Get">
            <summary>
            Get
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.Replace">
            <summary>
            Replace
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.EntitySubscribeRequestType">
            <summary>
            Name of entity to subscribe for
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.EntitySubscribeRequestType.Name">
            <summary>
            Entity name
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.SubscribeForSimulationEntity">
            <summary>
            Subscribe for entity
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SubscribeForSimulationEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.SubscribeForSimulationEntity.#ctor(Microsoft.Robotics.Simulation.Engine.EntitySubscribeRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.UpdateSimulationEntity">
            <summary>
            Update entity
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.UpdateSimulationEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.UpdateSimulationEntity.#ctor(Microsoft.Robotics.Simulation.Engine.VisualEntity)">
            <summary>
            Initialization constructor
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.InsertSimulationEntity">
            <summary>
            Insert entity
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.InsertSimulationEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.InsertSimulationEntity.#ctor(Microsoft.Robotics.Simulation.Engine.VisualEntity)">
            <summary>
            Initialization constructor
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.QuerySimulationEntity">
            <summary>
            Query for Entity
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.QuerySimulationEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.QuerySimulationEntity.#ctor(Microsoft.Robotics.Simulation.Engine.VisualEntity)">
            <summary>
            Initialization constructor
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.QuerySimulationEntityResponseType">
            <summary>
            The response to a QuerySimulationEntity request
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.QuerySimulationEntityResponseType.Entity">
            <summary>
            Entity
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.DeleteSimulationEntity">
            <summary>
            Delete entity
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DeleteSimulationEntity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.DeleteSimulationEntity.#ctor(Microsoft.Robotics.Simulation.Engine.VisualEntity)">
            <summary>
            Initialization constructor
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.UpdateCameraView">
            <summary>
            Update main camera view
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.UpdateCameraView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.UpdateCameraView.#ctor(Microsoft.Robotics.Simulation.Engine.CameraView)">
            <summary>
            Initialization constructor
            </summary>
            <param name="view"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.UpdateSimulatorConfiguration">
            <summary>
            Update simulator configuration
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.UpdateSimulatorConfiguration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.UpdateSimulatorConfiguration.#ctor(Microsoft.Robotics.Simulation.Engine.SimulatorConfiguration)">
            <summary>
            Initialization constructor
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.QuerySimulatorConfiguration">
            <summary>
            Query for Simulator Configuration
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.QuerySimulatorConfiguration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.QuerySimulatorConfiguration.#ctor(Microsoft.Robotics.Simulation.Engine.SimulatorConfiguration)">
            <summary>
            Initialization constructor
            </summary>
            <param name="config"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.IntersectRay">
            <summary>
            Intersect ray with visual entities (must have meshes)
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.IntersectRay.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.IntersectRay.#ctor(Microsoft.Robotics.PhysicalModel.Ray)">
            <summary>
            Initialization constructor
            </summary>
            <param name="ray"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.BeginRecordingRequest">
            <summary>
            A request to begin recording entity movements
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.FinishRecordingRequest">
            <summary>
            A request to Finish recording entity movements
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FinishRecordingRequest.Filename">
            <summary>
            The name of the playback file.  Non-absolute pathnames are relative to the layout root.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FinishRecordingRequest.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FinishRecordingRequest.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.BeginRecording">
            <summary>
            Begin recording entity movements to a .plb file
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.BeginRecording.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.BeginRecording.#ctor(Microsoft.Robotics.Simulation.Engine.BeginRecordingRequest)">
            <summary>
            Initialization constructor
            </summary>
            <param name="req"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.FinishRecording">
            <summary>
            Finish recording entity movements to a .plb file
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FinishRecording.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FinishRecording.#ctor(Microsoft.Robotics.Simulation.Engine.FinishRecordingRequest)">
            <summary>
            Initialization constructor
            </summary>
            <param name="req"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.BeginPlaybackRequest">
            <summary>
            A request to begin playback of entity movements
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.BeginPlaybackRequest.Filename">
            <summary>
            The name of the playback file.  Non-absolute pathnames are relative to the layout root.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.BeginPlaybackRequest.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.BeginPlaybackRequest.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.FinishPlaybackRequest">
            <summary>
            A request to Finish playback of entity movements
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.BeginPlayback">
            <summary>
            Begin playback of entity movements from a .plb file
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.BeginPlayback.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.BeginPlayback.#ctor(Microsoft.Robotics.Simulation.Engine.BeginPlaybackRequest)">
            <summary>
            Initialization constructor
            </summary>
            <param name="req"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.FinishPlayback">
            <summary>
            Finish playback of entity movements from a .plb file
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FinishPlayback.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FinishPlayback.#ctor(Microsoft.Robotics.Simulation.Engine.FinishPlaybackRequest)">
            <summary>
            Initialization constructor
            </summary>
            <param name="req"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.UpdatePhysicsTimeStep">
            <summary>
            Update simulation timestep programatically via message
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.UpdatePhysicsTimeStep.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.UpdatePhysicsTimeStep.#ctor(System.Single)">
            <summary>
            Initialization constructor
            </summary>
            <param name="timeStep"></param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.RequiresParentAttribute">
            <summary>
            Add to entity types to note if they require a parent or not
            This is an optinal attribute
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.RequiresParentAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.RequiresParentAttribute.ParentTypeAllowed">
            <summary>
            Optional. Defaults to all types if this is null.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.RequiresParentAttribute.IncludeDerivedTypes">
            <summary>
            Optional. Defaults to false.
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.VisualEntityOperation">
            <summary>
            Base operation for Visual entity update and render operations
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityOperation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityOperation.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initialization constructor
            </summary>
            <param name="device"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityOperation.Device">
            <summary>
            Graphics device
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.FrameUpdate">
            <summary>
            Frame update message, send once a frame from arbitrary thread context
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FrameUpdate.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Double,System.Double,Microsoft.Robotics.Simulation.Engine.CameraEntity,System.Boolean,Microsoft.Robotics.Simulation.RenderMode)">
            <summary>
            Initialization constructor
            </summary>
            <param name="device"></param>
            <param name="elapsedTime"></param>
            <param name="applicationTime"></param>
            <param name="activeCamera"></param>
            <param name="windowHasFocus"></param>
            <param name="currentRenderMode"></param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FrameUpdate.CameraPose">
            <summary>
            Active camera pose
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FrameUpdate.ActiveCamera">
            <summary>
            Active camera entity
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FrameUpdate.ElapsedTime">
            <summary>
            Elapsed time since last update
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FrameUpdate.ApplicationTime">
            <summary>
            Application elapsed time (since start)
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FrameUpdate.WindowHasFocus">
            <summary>
            True if the window which hosts the simulator has input focus
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FrameUpdate.ElapsedRealTime">
            <summary>
            The actual amount of time elapsed since the last frame.  This 
            value is not affected by the current timebase mode.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FrameUpdate.CurrentRenderMode">
            <summary>
            The current simulator rendering mode.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.FrameUpdate.FrameId">
            <summary>
            Id of current frame useful to temporaral coherence.
            Note, this might be negative, but that is ok, becuase CLSCompliant types 
              don't support unsigned types.
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.MatrixTransforms">
            <summary>
            Transforms
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.MatrixTransforms.World">
            <summary>
            World
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.MatrixTransforms.View">
            <summary>
            View
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.MatrixTransforms.Projection">
            <summary>
            Projection
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.VisualEntityProperties">
            <summary>
            Visual entity properties
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntityProperties.None">
            <summary>
            No properties
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntityProperties.UsesAlphaBlending">
            <summary>
            Uses alpha blending
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntityProperties.DisableRendering">
            <summary>
            Skip rendering
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntityProperties.InitializedWithState">
            <summary>
            The entity was reconstructed from XML
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntityProperties.DoCompletePhysicsShapeUpdate">
            <summary>
            Update pose for all physics shapes that are part of the physics Entity instance
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntityProperties.Ground">
            <summary>
            This is a ground entity
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntityProperties.DisableBackfaceCulling">
            <summary>
            Render both front and back faces rather than only front
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntityProperties.CullCounterClockwise">
            <summary>
            Render only front faces rather than back
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntityProperties.DisableViewFrustumCulling">
            <summary>
            Is view frustum culling disabled?
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.VisualEntityProperties.TexturesPending">
            <summary>
            The mesh requires textures but they have not yet been loaded
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.Material">
            <summary>
            Material definition
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Material.ToString">
            <summary>
            Returns short name for property editor
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Material.AmbientColor">
            <summary>Ambient</summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Material.DiffuseColor">
            <summary>Diffuse</summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Material.EmissiveColor">
            <summary>Emmisive</summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Material.SpecularColor">
            <summary>Specular</summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Material.Power">
            <summary>Power</summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Material.Default">
            <summary>
            Return a default material
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.ExtendedMaterial">
            <summary>
            File based material
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.ExtendedMaterial.Material">
            <summary>
            Basic material properties
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.ExtendedMaterial.TextureFileName">
            <summary>
            Texture file name
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.FloorplanRenderInfo">
            <summary>
            Information about the 2D rendering surface
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FloorplanRenderInfo.Scale">
            <summary>
            The X and Y scale of the floorplan view
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FloorplanRenderInfo.Offset">
            <summary>
            The X and Y offset of the floorplan view
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FloorplanRenderInfo.G">
            <summary>
            The Graphics object used to render to the floorplan view
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FloorplanRenderInfo.Center">
            <summary>
            The Center of the window
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FloorplanRenderInfo.Target">
            <summary>
            The render target bitmap
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FloorplanRenderInfo.DefaultFont">
            <summary>
            The default font to use in drawing text
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FloorplanRenderInfo.EditTarget">
            <summary>
            The entity currently being edited
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.OperationResult">
            <summary>
            Used by entities to report the result of long operations
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.OperationResult.Started">
            <summary>
            The operation has started
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.OperationResult.Canceled">
            <summary>
            The operation was canceled before it finished
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.OperationResult.Completed">
            <summary>
            The operation completed successfully
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.OperationResult.Error">
            <summary>
            The operation completed early due to an error
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.CameraKeys">
            <summary>
            Used to map keys to the camera
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraKeys.StrafeLeft">
            <summary>
            Left strafe
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraKeys.StrafeRight">
            <summary>
            Right strafe
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraKeys.MoveForward">
            <summary>
            Move forward
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraKeys.MoveBackward">
            <summary>
            Move backward
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraKeys.MoveUp">
            <summary>
            Move up
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraKeys.MoveDown">
            <summary>
            Move down
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraKeys.Reset">
            <summary>
            Reset camera position
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraKeys.ControlDown">
            <summary>
            Control key down
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraKeys.Run">
            <summary>
            Run
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraKeys.MaxKeys">
            <summary>
            Max value
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.CameraKeys.Unknown">
            <summary>
            Unknow key was pressed
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.MouseButtonMask">
            <summary>
            Mouse button mask values
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.Camera">
            <summary>
            Simple base camera class that moves and rotates.  The base class
            records mouse and keyboard input for use by a derived class, and 
            keeps common state.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Camera.MapKey(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Maps NativeMethods.WindowMessage.Key* msg to a camera key
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._viewMatrix">
            <summary>
            View matrix
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._inverseViewMatrix">
            <summary>
            The inverse of the View matrix
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._projMatrix">
            <summary>
            Projection matrix
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera.keys">
            <summary>
            Array indexed by camera key value, indicating if key is pressed or not
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._cachedKeyboardState">
            <summary>
            Previous frame keyboard state
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._cachedMouseState">
            <summary>
            Previous frame mouse state
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._cachedGamePadState">
            <summary>
            Previous frame game pad state
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._defaultEye">
            <summary>
             Default camera eye position
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._defaultLookAt">
            <summary>
            Default LookAt position
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._eye">
            <summary>
            Camera eye position
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._lookAt">
            <summary>
            Current LookAt position
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._cameraYawAngle">
            <summary>
            Yaw angle of camera
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._cameraPitchAngle">
            <summary>
            Pitch angle of camera
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._acceleration">
            <summary>
            instantaneous acceleration
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._velocity">
            <summary>
            Velocity of camera
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._velocityDrag">
            <summary>
            Velocity drag force
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._dragTimer">
            <summary>
            Countdown timer to apply drag
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._totalDragTimeToZero">
            <summary>
            Time it takes for velocity to go from full to 0
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._rotationVelocity">
            <summary>
            Velocity of camera
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._fieldOfView">
            <summary>
            Field of view
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._aspectRatio">
            <summary>
            Aspect ratio
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._nearPlane">
            <summary>
            Near plane
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._farPlane">
            <summary>
            Far plane
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._rotationScaler">
            <summary>
            Scaler for rotation
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._moveScaler">
            <summary>
            Scaler for movement
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._isInvertPitch">
            <summary>
            if true, inverts the pitch axis
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._isEnablePositionMovement">
            <summary>
            If true, then the user can translate the camera/model
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._isEnableYAxisMovement">
            <summary>
            If true, then camera can move in the y-axis
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._isClipToBoundary">
            <summary>
            If true, then the camera will be clipped to the boundary
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._minBoundary">
            <summary>
            Min point in clip boundary
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.Camera._maxBoundary">
            <summary>
            Max point in clip boundary
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Camera.Update(System.Double,System.Boolean)">
            <summary>
            Abstract method to control camera during frame move
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Camera.#ctor">
            <summary>
            Constructor for the base camera class (Sets up camera defaults)
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Camera.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor for the base camera class (Sets up camera defaults)
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Camera.UpdateInput(System.Double,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.GamePadState,System.Boolean)">
            <summary>
            Processes input device state
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Camera.Reset">
            <summary>
            Reset the camera's position back to the default
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Camera.SetViewParameters(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Client can call this to change the position and direction of camera
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Camera.SetViewParameters(Microsoft.Robotics.PhysicalModel.Pose)">
            <summary>
            Client can call this to change the position and direction of camera using the pose
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Camera.SetProjectionParameters(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates the projection matrix based on input params
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Camera.UpdateVelocity(System.Double)">
            <summary>
            Figure out the velocity based on keyboard input and drag if any
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Camera.ConstrainToBoundary(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Clamps V to lie inside boundaries
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Camera.ViewDistance">
            <summary>
            Distance from eyepoint to lookat point
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Camera.ViewMatrix">
            <summary>Returns the view transformation matrix</summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Camera.ProjectionMatrix">
            <summary>Returns the projection transformation matrix</summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Camera.EyeLocation">
            <summary>Returns the location of the eye</summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Camera.LookAtPoint">
            <summary>Returns the look at point of the camera</summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Camera.IsPositionMovementEnabled">
            <summary>Is position movement enabled</summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Camera.IsMouseButtonDown">
            <summary>
            True if any mouse button was depressed in the previous frame
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.FirstPersonCamera">
            <summary>
            Simple first person camera class that moves and rotates.
            It allows yaw and pitch but not roll.  It uses keyboard and 
            cursor to respond to keyboard and mouse input and updates the 
            view matrix based on input.  
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.Engine.FirstPersonCamera.CameraWorld">
            <summary>
            World matrix of the camera (inverse of the view matrix)
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.FirstPersonCamera.Update(System.Double,System.Boolean)">
            <summary>
            Update the view matrix based on user input and elapsed time
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.AttachedChildCamera">
            <summary>
            This camera is meant to be attached to another entity.  It
            sets its orientation based on the pose of its associated 
            Camera entity.  It moves in yaw, pitch, and roll.  It does
            not respond to keyboard or mouse input.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.AttachedChildCamera.#ctor(Microsoft.Robotics.Simulation.Engine.VisualEntity)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.AttachedChildCamera.#ctor(Microsoft.Robotics.Simulation.Engine.VisualEntity,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
            <param name="fov"></param>
            <param name="aspectRatio"></param>
            <param name="far"></param>
            <param name="near"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.AttachedChildCamera.Update(System.Double,System.Boolean)">
            <summary>
            This method does nothing for this camera model because the keyboard and
            mouse don't affect its position or orientation.
            </summary>
            <param name="elapsedRealTime"></param>
            <param name="hasFocus"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.AttachedChildCamera.SetViewParameters(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            The the position and orientation of the camera based on its associated camera entity
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter">
            <summary>
            Encapsulated xna effect parameter that handles reloading
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Set a texture parameter
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(System.String)">
            <summary>
            Set a string parameter
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Set a matrix array parameter
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Set a matrix parameter
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(Microsoft.Xna.Framework.Quaternion[])">
            <summary>
            Set a quaternion array parameter
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Set a quaternion parameter
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(Microsoft.Xna.Framework.Vector4[])">
            <summary>
            Set a Vector4 array parameter
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Set a Vector4 parameter
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(Microsoft.Xna.Framework.Vector3[])">
            <summary>
            Set a Vector3 array parameter
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Set a Vector3 parameter
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Set a Vector2 array parameter
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Set a Vector2 parameter
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(System.Single[])">
            <summary>
            Set a float array parameter
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(System.Single)">
            <summary>
            Set a float parameter
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(System.Int32[])">
            <summary>
            Set a int array parameter
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(System.Int32)">
            <summary>
            Set a int parameter
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(System.Boolean[])">
            <summary>
            Set a bool array parameter
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.SetValue(System.Boolean)">
            <summary>
            Set a bool parameter
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.IsValid">
            <summary>
            Gets whether the parameter is valid
            A parameter may be invalid if it doesn't exist in an effect
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.IsArray">
            <summary>
            Gets whether the parameter is an array type
            This is undefined if the effect is invalid
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CachedEffectParameter.Name">
            <summary>
            Gets the name of the parameter
            This should never change throughout the lifetime of the parameter
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.CachedEffect">
            <summary>
            Encapsulated xna Effect that handles reloading
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.#ctor(System.String,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initialize from a .fx file
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.AddCompilerMacro(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Format and add a compiler macro to the macro string.
            Each macro is formatted as "target=value" with subsequence macros separated with a semicolon
            </summary>
            <param name="macros">The current macro string</param>
            <param name="left">The target to be assigned</param>
            <param name="right">The value to assign to the target</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.InitEffect(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.InitParameters">
            <summary>
            This uses reflection to assign all the default effect parameters in this effect.
            Each default effect parameter needs a name associated with it that is set by an attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.GetParameter(System.String)">
            <summary>
            Gets a parameter from the effect by name
            This never returns null. 
            If a parameter does not exist, the IsValid flag is set on the returned CachedEffectParameter
            </summary>
            <param name="parameterName">Name of the parameter to retreive</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.CommitChanges">
            <summary>
            Commits any state changes made between begin and end pass calls
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.RenderAllPasses(System.String,Microsoft.Robotics.Simulation.Engine.CachedEffect.RenderFunc)">
            <summary>
            Renders an effect technique using a delegate method
            </summary>
            <param name="renderDelegate">Delegate with draw calls that should be used for rendering</param>
            <param name="techniqueName">Technique name to use</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.SetSceneTexture(Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Set a diffuse texture for the effect to use
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.SetMaterial(Microsoft.Robotics.Simulation.Engine.Material)">
            <summary>
            Send all material parameters at once
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.SetMaterialAmbient(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Set an ambient color for the effect
            </summary>
            <param name="ambientColor"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.SetMaterialDiffuse(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Set a diffuse color for the effect
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.SetMaterialSpecular(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Set a specular color for the effect
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.SetMaterialShininess(System.Single)">
            <summary>
            Set the shininess of the material for the effect
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.SetSkyDiffuse(Microsoft.Xna.Framework.Graphics.TextureCube)">
            <summary>
            Sets the lighting texture for the effect
            </summary>
            <param name="lightingTexture">Cube map texture to use for lighting</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.SetEyePosition(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets the position of the camera in world space
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.SetLightPositions(Microsoft.Xna.Framework.Vector4[])">
            <summary>
            Sets the positions of the lights in the scene
            </summary>
            <param name="lightPositions">Array of world frame light positions with less than or equal to SimulationEngine.MAX_LIGHTS</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.SetLightDirections(Microsoft.Xna.Framework.Vector4[])">
            <summary>
            Send the directions of the lights to the effect
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.SetLightSpotCosHalfUmbra(System.Single[])">
            <summary>
            Send the cosine of the umbra/2 of a spotlight
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.SetLightColors(Microsoft.Xna.Framework.Vector4[])">
            <summary>
            Send the light colors to the effect
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.SetLightFalloffs(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Send the light falloff to the effect
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.SetExposureLevel(System.Single)">
            <summary>
            Send the exposure level of the scene to the effect
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.SetMatrixTransforms(Microsoft.Robotics.Simulation.Engine.MatrixTransforms)">
            <summary>
            Set the matrix transforms for the effect
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.SetFogColor(Microsoft.Robotics.PhysicalModel.ColorValue)">
            <summary>
            Set the color of the fog to use for scene objects
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.Dispose">
            <summary>
            Releases internal resources
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources (other than memory) used by the System.Windows.Forms.Form.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; 
            false to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.CachedEffect.ComputeMaximalVertexDeclaration(System.String)">
            <summary>
            Given a technique, this function computes the vertex declaration that contains
            all the elements needed for all the passes in this technique
            </summary>
            <param name="techniqueName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.CachedEffect.IsValid">
            <summary>
            Gets whether the internal effect is valid
            The effect will be invalid if it did not compile
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.CachedEffect.RenderFunc">
            <summary>
            Delegate for rendering things using the effect
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.CachedEffect.RequiredVertexElements">
            <summary>
            helper struct for ComputeMaximalVertexDeclaration
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.ResourceCache">
            <summary>
            Manages graphics resources to minimize duplicate instances
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.ResourceCache.IsCacheFileSynchronized(System.String,System.String)">
            <summary>
            True if cached file exists and it is the same date as source file
            </summary>
            <param name="filePath"></param>
            <param name="cacheFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.ResourceCache.CreateHeightFieldMesh(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.HeightFieldShapeProperties,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create an advanced terrain mesh, with Level Of Detail (LOD) support using <see cref="T:Microsoft.Robotics.Simulation.Physics.HeightFieldShapeProperties"/>
            </summary>
            <param name="device"></param>
            <param name="heightField"></param>
            <param name="level"></param>
            <param name="nx"></param>
            <param name="ny"></param>
            <param name="totx"></param>
            <param name="toty"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.ResourceCache.UpdateHeightFieldMeshLOD(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Engine.VisualEntityMesh,System.Int32,System.Int32)">
            <summary>
            Update height field mesh instance based on current level of detail
            </summary>
            <param name="device"></param>
            <param name="mesh"></param>
            <param name="side"></param>
            <param name="level"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.ResourceCache.CreateSpriteMesh(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Single)">
            <summary>
            Create a graphics mesh representing a sprite
            </summary>
            <param name="device"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.ResourceCache.CreateMesh(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.ShapeProperties)">
            <summary>
            Create a graphics mesh using shape properties
            </summary>
            <param name="device"></param>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.ResourceCache.CreateMeshFromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
            <summary>
            Create a mesh from file
            </summary>
            <param name="device"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.ResourceCache.CreateBitmapFromFile(System.String)">
            <summary>
            Create a bitmap from a file
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.ResourceCache.CreateTextureFromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
            <summary>
            Create texture from file
            </summary>
            <param name="device"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.ResourceCache.CreateCubeTextureFromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
            <summary>
            Create cube texture from file
            </summary>
            <param name="device"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.ResourceCache.CreateEffectFromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
            <summary>Create an effect from a file</summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.ResourceCache.OnResetDevice(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Called when the device is reset
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.ResourceCache.OnLostDevice">
            <summary>
            Clear any resources that need to be lost
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.ResourceCache.OnDestroyDevice">
            <summary>
            Destroy any resources and clear the caches
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.ResourceCache.RefreshShaders(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.Utilities">
            <summary>
            Misc utility functionality
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Utilities.GetCubeMapViewMatrix(Microsoft.Xna.Framework.Graphics.CubeMapFace)">
            <summary>Returns the view matrix for a cube map face</summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Utilities.GetCubeMapViewMatrix(System.Int32)">
            <summary>Returns the view matrix for a cube map face</summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Utilities.Assert(System.Boolean,System.String,System.String)">
            <summary>
            Assertion will not end program, only prints out a message
            </summary>
            <param name="condition"></param>
            <param name="message"></param>
            <param name="detailedMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Utilities.Assert(System.Boolean,System.String)">
            <summary>
            Assertion will not end program, only prints out a message
            </summary>
            <param name="condition"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Utilities.Assert(System.Boolean)">
            <summary>
            Assertion will not end program, only prints out a message
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Utilities.CopyBytesToBitmap(System.Byte[],System.Int32,System.Int32,System.Drawing.Bitmap@)">
            <summary>
            Updates a bitmap from a byte array
            </summary>
            <param name="srcData">Should be 32 or 24 bits per pixel (ARGB or RGB format)</param>
            <param name="srcDataWidth">Width of the image srcData represents</param>
            <param name="srcDataHeight">Height of the image srcData represents</param>
            <param name="destBitmap">Bitmap to copy to. Will be recreated if necessary to copy to the array.</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Utilities.CopyBytesToBitmap(System.Int64[],System.Drawing.Bitmap)">
            <summary>
            Updates a bitmap from an array. 
            Assumes the bitmap and array have the correct dimensions with respect to the bitmap's PixelFormat.
            </summary>
            <param name="srcData">Source array</param>
            <param name="destBitmap">Bitmap to copy to</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Utilities.CopyBytesToBitmap(System.Int32[],System.Drawing.Bitmap)">
            <summary>
            Updates a bitmap from an array. 
            Assumes the bitmap and array have the correct dimensions with respect to the bitmap's PixelFormat.
            </summary>
            <param name="srcData">Source array</param>
            <param name="destBitmap">Bitmap to copy to</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Utilities.CopyBytesToBitmap(System.Int16[],System.Drawing.Bitmap)">
            <summary>
            Updates a bitmap from an array. 
            Assumes the bitmap and array have the correct dimensions with respect to the bitmap's PixelFormat.
            </summary>
            <param name="srcData">Source array</param>
            <param name="destBitmap">Bitmap to copy to</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Utilities.CopyBytesToBitmap(System.Byte[],System.Drawing.Bitmap)">
            <summary>
            Updates a bitmap from an array. 
            Assumes the bitmap and array have the correct dimensions with respect to the bitmap's PixelFormat.
            </summary>
            <param name="srcData">Source array</param>
            <param name="destBitmap">Bitmap to copy to</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Utilities.CopyBitmapToBytes(System.Drawing.Bitmap,System.Int64[])">
            <summary>
            Copy the bytes of a bitmap to an array. 
            Assumes the array is of the correct length and type to contain the bitmap.
            </summary>
            <param name="bmp">Bitmap to copy the data from</param>
            <param name="imageDest">Array to copy the data to</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Utilities.CopyBitmapToBytes(System.Drawing.Bitmap,System.Int32[])">
            <summary>
            Copy the bytes of a bitmap to an array. 
            Assumes the array is of the correct length and type to contain the bitmap.
            </summary>
            <param name="bmp">Bitmap to copy the data from</param>
            <param name="imageDest">Array to copy the data to</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Utilities.CopyBitmapToBytes(System.Drawing.Bitmap,System.Int16[])">
            <summary>
            Copy the bytes of a bitmap to an array. 
            Assumes the array is of the correct length and type to contain the bitmap.
            </summary>
            <param name="bmp">Bitmap to copy the data from</param>
            <param name="imageDest">Array to copy the data to</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Utilities.CopyBitmapToBytes(System.Drawing.Bitmap,System.Byte[])">
            <summary>
            Copy the bytes of a bitmap to an array. 
            Assumes the array is of the correct length and type to contain the bitmap.
            </summary>
            <param name="bmp">Bitmap to copy the data from</param>
            <param name="imageDest">Array to copy the data to</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Utilities.GetMouseState">
            <summary>
            Gets the current state of the mouse.
            Call instead of xna.Input.Mouse.GetState()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Utilities.GetKeyboardState">
            <summary>
            Gets the current state of the keyboard.
            Call instead of xna.Input.Keyboard.GetState()
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh">
            <summary>
            Manages rendering of a triangulated mesh
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.ToString">
            <summary>
            Returns short name for property editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.CreateConvexMeshShape(Microsoft.Robotics.Simulation.Engine.VisualEntityMesh,System.String,System.Single)">
            <summary>
            Generates a convex physics collision mesh using the geometry data from the supplied graphics mesh
            </summary>
            <param name="mesh"></param>
            <param name="meshFile"></param>
            <param name="mass"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.CreateTriangleMeshShape(Microsoft.Robotics.Simulation.Engine.VisualEntityMesh,System.String,System.Single)">
            <summary>
            Generates a physics collision mesh using the geometry data from the supplied graphics mesh
            </summary>
            <remarks>Triangle based collision meshes will be static (cant not be moved)</remarks>
            <param name="mesh"></param>
            <param name="meshFile"></param>
            <param name="mass"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,System.Boolean)">
            <summary>
            Create mesh based on file data
            </summary>
            <param name="device">Graphics device</param>
            <param name="name">Mesh file name></param>
            <param name="optimize">True to optimize mesh data</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,System.Boolean)">
            <summary>
            Create mesh based on file data
            </summary>
            <param name="device">Graphics device</param>
            <param name="sourceStream">Data stream for BOS data</param>
            <param name="optimize">True to optimize mesh data</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.WheelShapeProperties)">
            <summary>
            Create a torus using <see cref="T:Microsoft.Robotics.Simulation.Physics.WheelShapeProperties"/>
            </summary>
            <param name="device"></param>
            <param name="wheel"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.CapsuleShapeProperties)">
            <summary>
            Create a capsule using <see cref="T:Microsoft.Robotics.Simulation.Physics.CapsuleShapeProperties"/>
            </summary>
            <param name="device"></param>
            <param name="capsule"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Single)">
            <summary>
            Create a Sprite Mesh with the specified width and height
            </summary>
            <param name="device"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.HeightFieldShapeProperties)">
            <summary>
            Create a terrain mesh using <see cref="T:Microsoft.Robotics.Simulation.Physics.HeightFieldShapeProperties"/>
            </summary>
            <param name="device"></param>
            <param name="heightfield"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.HeightFieldShapeProperties,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create an advanced terrain mesh, with Level Of Detail (LOD) support using <see cref="T:Microsoft.Robotics.Simulation.Physics.HeightFieldShapeProperties"/>
            </summary>
            <param name="device">Graphics device</param>
            <param name="hf">Height field shape properties</param>
            <param name="level">Level of detail for this instance</param>
            <param name="nx"></param>
            <param name="ny"></param>
            <param name="totx"></param>
            <param name="toty"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.BoxShapeProperties)">
            <summary>
            Create a box mesh from <see cref="T:Microsoft.Robotics.Simulation.Physics.BoxShapeProperties"/>
            </summary>
            <param name="device"></param>
            <param name="box"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.Physics.SphereShapeProperties)">
            <summary>
            Create a sphere mesh from <see cref="T:Microsoft.Robotics.Simulation.Physics.SphereShapeProperties"/>
            </summary>
            <param name="device"></param>
            <param name="sphere"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.#ctor">
            <summary>
            Empty constructor, does not create a valid VisualEntityMesh by itself
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.ComputeShadowMesh">
            <summary>
            Computes a shadow volume mesh given the data in the current visual entity mesh
            </summary>
            <returns>Mesh with no holes that has degenerate quads inserted between faces</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.CreateCommonOps(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Robotics.Simulation.MeshLoader.BoSMesh)">
            <summary> common initialization when building a VisualEntityMesh </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.UpdateNormals">
            <summary>
            Simulation internal use. Not implemented
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.OnResetDevice(System.Object,System.EventArgs)">
            <summary>Occurs after the device has been reset</summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.OnLostDevice(System.Object,System.EventArgs)">
            <summary>Occurs before the device is going to be reset</summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.InitializeShadowMesh">
            <summary>
            Initializes the shadow mesh either from a cached file or by computing it from the current mesh data.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.GetShadowMeshPath(System.String)">
            <summary>
            Get the path of a shadow mesh from the path of a normal mesh. 
            The actual file may or may not exist.
            </summary>
            <param name="meshPath">Path to the normal mesh</param>
            <returns>Path to a shadow mesh counterpart.</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.ComputeBoundingVolume">
            <summary>
            Compute bounding sphere
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.Intersect(Microsoft.Xna.Framework.Ray,Microsoft.Robotics.Simulation.Engine.VisualEntity)">
            <summary>
            Intersects a ray with this mesh and returns a list of intersection records
            </summary>
            <param name="ray">Ray to intersect with</param>
            <param name="ownerEntity">Entity that owns this mesh</param>
            <returns>List of records containing intersection information</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.Dispose">
            <summary>
            Frees resources
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.OnDeviceDisposing(System.Object,System.EventArgs)">
            <summary>Cleans up any resources required when this object is disposed</summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.AllowInstancing">
            <summary>
            Defaults to true to give the capability for this mesh to use batched instancing.
            Under the scenerio you don't want this or are noticing artifacts, set this to false.
            Generally, you shouldn't need to modifify this value
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.RequiresTexture">
            <summary>
            True if this VisualEntityMesh uses one or more textures
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.RenderingMaterials">
            <summary>
            Materials
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.Textures">
            <summary>
            Textures
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.TextureFilenames">
            <summary>
            Textures Filenames
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.IndexBuffer">
            <summary>
            Index buffer
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.VertexBuffer">
            <summary>
            Vertex buffer
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.IndexBufferData">
            <summary>
            Array of index buffer data
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.SimplifiedIndexBufferData">
            <summary>
            Array of simplified index buffer data
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.VertexDeclaration">
            <summary>
            Vertex declaration
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.PhysicsIndexBufferData">
            <summary>
            Array of index buffer data where each index batch is not zero-based
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.VertexBufferData">
            <summary>
            Array of vertex buffer data
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.SimplifiedVertexBufferData">
            <summary>
            Array of simplified vertex buffer data
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.TransformedVertexBufferData">
            <summary>
            Array of vertex buffer data transformed by its model transform
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.FaceCount">
            <summary>
            Number of triangle faces
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.VertexCount">
            <summary>
            Number of vertices
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.BoundingSphere">
            <summary>
            Bounding sphere, calculated once on mesh creation
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.BoundingBox">
            <summary>
            Bounding Box, calculated once on mesh creation
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.ShadowMesh.#ctor(System.String)">
            <summary>
            Initialize shadow mesh from a bos mesh
            </summary>
            <param name="shadowMeshPath">Path to a BoS mesh</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.ShadowMesh.Save(System.String)">
            <summary>
            Saves the shadow mesh to a specified path for later use
            </summary>
            <param name="shadowMeshPath">Path to save shadow mesh to</param>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.VisualEntityMesh.EdgeEntry">
            <summary>
            Helper structure for finding adjacency information
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.Triangle">
            <summary>
            Triangle, expressed as three points.
            Hopefully something better will come along from Xna.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.Triangle.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Create a new triangle from three points
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Triangle.P0">
            <summary>
            First point of triangle.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Triangle.P1">
            <summary>
            Second point of triangle.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.Triangle.P2">
            <summary>
            Third point of triangle.
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.Engine.TriangleIntersectionRecord">
            <summary>
            Recorded information about an intersection with a triangle
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.Engine.TriangleIntersectionRecord.#ctor(Microsoft.Robotics.Simulation.Engine.Triangle,Microsoft.Robotics.Simulation.Engine.VisualEntity,Microsoft.Robotics.Simulation.Engine.VisualEntityMesh,System.Single)">
            <summary>
            Creates a new record
            </summary>
            <param name="triangle">Triangle that has been intersected with</param>
            <param name="ownerEntity">Entity that holds the given mesh</param>
            <param name="ownerMesh">Mesh that holds the given triangle</param>
            <param name="intersectionDistance">Time of intersection</param>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.TriangleIntersectionRecord.Triangle">
            <summary>
            Gets the triangle that has been intersected
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.TriangleIntersectionRecord.OwnerMesh">
            <summary>
            Gets the owner of the triangle in this record
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.TriangleIntersectionRecord.OwnerEntityName">
            <summary>
            Gets the entity that owns this mesh and triangle
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.TriangleIntersectionRecord.OwnerEntity">
            <summary>
            Read-only reference to the entity defines by OwnerEntityName
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.Engine.TriangleIntersectionRecord.IntersectionDistance">
            <summary>
            Gets the distance between the point of intersection and the ray origin that intersects the triangle
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.MeshLoader.MeshFace">
            <summary>
            Defines a mesh triangle face
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.MeshLoader.MeshFace.MaterialName">
            <summary>
            Material name
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.MeshLoader.MeshFace.Item(System.Int32)">
            <summary>
            Indexed access to face element collection
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.MeshLoader.FaceElement">
            <summary>
            Triangle mesh face
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.FaceElement.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.FaceElement.Equals(System.Object)">
            <summary>
            Check instance equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.MeshLoader.FaceElement.VertexIndex">
            <summary>
            Vertex index
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.MeshLoader.FaceElement.NormalIndex">
            <summary>
            Normal index
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.MeshLoader.FaceElement.UvIndex">
            <summary>
            Texture coordinate index
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.BoSMesh.CreateHeightFieldLOD(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Robotics.Simulation.Physics.HeightFieldSample[])">
            <summary>
            Create height field mesh
            </summary>
            <param name="columnCount"></param>
            <param name="rowCount"></param>
            <param name="columnScale"></param>
            <param name="rowScale"></param>
            <param name="heightScale"></param>
            <param name="level"></param>
            <param name="nx"></param>
            <param name="ny"></param>
            <param name="totx"></param>
            <param name="toty"></param>
            <param name="heightSamples"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.BoSMesh.CreateHeightField(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.String,Microsoft.Robotics.Simulation.Physics.HeightFieldSample[])">
            <summary>
            Create height field mesh
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.BoSMesh.CreateCylinder(System.Single,System.Single,Microsoft.Robotics.PhysicalModel.ColorValue)">
            <summary>
            Create cylinder
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.BoSMesh.CreateCapsule(System.Single,System.Single,Microsoft.Robotics.PhysicalModel.ColorValue)">
            <summary>
            Create capsule mesh
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.BoSMesh.Save(System.String)">
            <summary>
            Save the mesh to disc in a binary format
            </summary>
            <param name="filePath">file path</param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.BoSMesh.Load(System.String)">
            <summary>
            Create a BoSMesh from a file
            </summary>
            <param name="filePath">file path</param>
            <returns>BoSMesh from file</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.BoSMesh.Load(System.IO.Stream)">
            <summary>
            Create a BoSMesh from a stream
            </summary>
            <param name="sourceStream">stream with BOS data</param>
            <returns>BoSMesh from stream</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.BoSMesh.Load``1(System.IO.Stream)">
            <summary>
            Create a BoSMesh from a file
            </summary>
            <param name="fileStream">file stream</param>
            <typeparam name="T">must implement MeshImporter</typeparam>
            <returns>BoSMesh from the given importer</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.BoSMesh.Load``1(System.String)">
            <summary>
            Create a BoSMesh from a file
            </summary>
            <param name="filename">name of the file</param>
            <typeparam name="T">must implement MeshImporter</typeparam>
            <returns>BoSMesh from the given importer</returns>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.BoSMesh.BuildVertices(Microsoft.Robotics.Simulation.MeshLoader.MeshImporter,Microsoft.Robotics.Simulation.MeshLoader.BoSMesh.BuildVerticesOptimization)">
            <summary>
            This method takes normal, texture, color, and vertex data and combines it into 
            a list of vertices.  It then builds an index list to optimize rendering.  As the 
            index list is built, it attempts to match identical vertices.  The optimize parameter
            governs how many vertices are searched.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.BoSMesh.ComputeTangent">
            <summary>
            Tangent Space Computation for normal Mapping
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter">
            <summary>
            Abstract definition of a mesh importer implementation
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.Import(System.IO.Stream)">
            <summary>
            Imports the file based mesh into lists of geometry information, used to construct runtime mesh instances
            </summary>
            <param name="meshStream"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.Import(System.String,System.String)">
            <summary>
            Imports the file based mesh (using a filename) into lists of geometry information, used to construct runtime mesh instances
            </summary>
            <param name="meshFilename"></param>
            <param name="vertexColorMap"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.Import(System.IO.Stream,System.String)">
            <summary>
            Main import routine. Called by simulation to load the mesh
            </summary>
            <param name="meshStream"></param>
            <param name="vertexColorMap"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.ImportColor(System.String)">
            <summary>
            Import color values from file
            </summary>
            <param name="mapfile"></param>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.PostProcess">
            <summary>
            Called after Import to simplify mesh information
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.InitializeVertexColors">
            <summary>
            Adds a vertex color element for every texture coordinate
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.ComputeNormals">
            <summary>
            Computes normals for every vertex
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.Dispose">
            <summary>
            Disposes all resources
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.HasNormals">
            <summary>
            True if mesh has normals
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.HasTextureCoordinates">
            <summary>
            True if mesh has texture coordinates
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.TextureFiles">
            <summary>
            File names of textures
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.Materials">
            <summary>
            Materials
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.VertexColors">
            <summary>
            Vertex colors
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.Faces">
            <summary>
            Triangle faces
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.TextureCoordinates">
            <summary>
            Texture coordinates
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.Normals">
            <summary>
            Normals
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Simulation.MeshLoader.MeshImporter.Vertices">
            <summary>
            Vertices
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities">
            <summary>
            Utility functions to load and optimize an obj file
            and save to a bos file.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities.LoadObjFile(System.String,System.Object@)">
            <summary>
            Load a .obj file into a mesh object
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities.OptimizeMesh(System.Object@,System.Int32)">
            <summary>
            Optimize a mesh object
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities.SaveMeshAsBOS(System.String,System.Object)">
            <summary>
            Save a mesh to a .bos format file
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities.ResultCode">
            <summary>
            Result codes returned by the ObjUtilities
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities.ResultCode.Success">
            <summary>
            No error
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities.ResultCode.ErrorOpeningObj">
            <summary>
            Couldn't open the input .obj file for reading
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities.ResultCode.ErrorOpeningBos">
            <summary>
            Couldn't open the output .bos file for writing
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities.ResultCode.ErrorReadingObj">
            <summary>
            An error occurred while reading and parsing the .obj file
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities.ResultCode.ErrorInOptimization">
            <summary>
            An error occurred while optimizing the mesh
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities.ResultCode.ErrorSavingBos">
            <summary>
            An error occurred while writing the .bos file
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities.Result">
            <summary>
            The result of an operation.  The detail string contains additional details, if available
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities.Result.Code">
            <summary>
            The code of the result
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities.Result.Detail">
            <summary>
            Additional details about the error, if applicable and available
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities.Result.#ctor(Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities.ResultCode,System.String)">
            <summary>
            Builds a result structure with both a code and additional detail
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities.Result.#ctor(Microsoft.Robotics.Simulation.MeshLoader.ObjUtilities.ResultCode)">
            <summary>
            Builds a result structure with just a result code
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.MeshLoader.Utility.GeometryHelper">
            <summary>
            Helper for bounding sphere calculations
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.Utility.GeometryHelper.BoundingSphereInsidePlanes(Microsoft.Xna.Framework.Plane[],Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
            Computes if a sphere is contained inside a volume defined as collection of planes
            </summary>
            <param name="planes">Planes defining the volume</param>
            <param name="boundingsphere">Sphere to test</param>
            <returns>true if the sphere is contained</returns>
        </member>
        <member name="T:Microsoft.Robotics.Simulation.MeshLoader.Utility.ObjImporter">
            <summary>
            Class for Alias OBJ file format import
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.Utility.ObjImporter.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Simulation.MeshLoader.Utility.ObjImporter.Import(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="meshStream">The file path has been validated by the BoSMesh</param>
        </member>
    </members>
</doc>
